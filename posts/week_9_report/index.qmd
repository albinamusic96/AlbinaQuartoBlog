---
title: "Week 9 Report"
author: "Albina Music"
date: "2023-03-29"
categories: [report]
---

```{r}
#load libraries
library(tidyverse)

#load the data
review_data <- rio::import("review_data")
```

## number of reviews by year
```{r, echo= FALSE}
#Get number of reviews per year
reviews_by_year <- review_data %>%
  group_by(year) %>%
  summarize(counts = n())

ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))+
  geom_bar(stat= "identity",fill="white",color="black")+
  scale_x_continuous(breaks = 1999:2018)+
  theme(axis.text.x = element_text(angle = 85, vjust = 1, hjust=1))+
  xlab("")+
  ylab("")+
  ggtitle("Number of reviews per year",
          subtitle = "1999 to 2018")+
  theme(
    panel.background = element_rect(fill = "lightgrey",
                                colour = "lightgrey",
                                linewidth = 0.5, linetype = "solid"),
    panel.grid.major=element_line(colour="black",linewidth = .05),
    panel.grid.minor=element_line(colour="lightgrey"))

```

## verified users(the dataset contains details of whether the review was based on a verified purchase, from [Amazon Community](https://www.amazon.co.uk/gp/help/customer/display.html?nodeId=G75XTB7MBMBTXP6W))
```{r, echo= FALSE}
#| label: tbl-verified
#| tbl-cap: Number of reviews by purchase status

#Get number of verified users

verified_reviews <- review_data %>%
  group_by(verified) %>%
  summarize(counts = n())

# print table
knitr::kable(verified_reviews)

```

## number of reviews per year
```{r, echo= FALSE}
#Get number of reviews per year

year_by_verified_counts <- review_data %>%
  group_by(year,verified) %>%
  summarize(counts = n())

#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))
#ggplot(reviews_by_year, aes(x=year, y=counts))

# plot
ggplot(data = year_by_verified_counts, 
       mapping = aes(x=year, 
                     y=counts, 
                     group = verified,
                     fill = verified))+
  geom_bar(stat= "identity")+
  scale_x_continuous(breaks = 1999:2018)+
  theme(axis.text.x = element_text(angle = 85, vjust = 1, hjust=1))+
  xlab("")+
  ylab("")+
  ggtitle("Number of reviews per year",
          subtitle = "By purchase status")+
  theme(
    panel.background = element_rect(fill = "lightgrey",
                                colour = "lightgrey",
                                linewidth = 0.5, linetype = "solid"),
    panel.grid.major=element_line(colour="black",linewidth = .05),
    panel.grid.minor=element_line(colour="lightgrey"))

```

## number of reviews per rating
```{r, echo= FALSE}
#Get number of reviews per each rating
options(scipen = 999)

reviews_by_rating <- review_data %>%
  group_by(rating) %>%
  summarize(counts = n())

#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))
#ggplot(reviews_by_year, aes(x=year, y=counts))

# plot
ggplot(data = reviews_by_rating, mapping = aes(x=rating, y=counts))+
  geom_bar(stat= "identity",fill="white",color="black")+
  xlab("")+
  ylab("")+
  ggtitle("Review Ratings",
          subtitle = "Number of reviews for each rating")+
  theme(
    panel.background = element_rect(fill = "lightgrey",
                                colour = "lightgrey",
                                linewidth = 0.5, linetype = "solid"),
    panel.grid.major=element_line(colour="black",linewidth = .05),
    panel.grid.minor=element_line(colour="lightgrey"))

```

## number of reviews per year
```{r}
#Get number of reviews per year

rating_by_verified_counts <- review_data %>%
  group_by(rating,verified) %>%
  summarize(counts = n())

#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))
#ggplot(reviews_by_year, aes(x=year, y=counts))

# plot
ggplot(data = rating_by_verified_counts, 
       mapping = aes(x=rating, 
                     y=counts, 
                     group = verified,
                     fill = verified))+
  geom_bar(stat= "identity", position = "dodge")+
  xlab("")+
  ylab("")+
  ggtitle("Review Ratings",
          subtitle = "By purchase status")+
  theme(
    panel.background = element_rect(fill = "lightgrey",
                                colour = "lightgrey",
                                linewidth = 0.5, linetype = "solid"),
    panel.grid.major=element_line(colour="black",linewidth = .05),
    panel.grid.minor=element_line(colour="lightgrey"))

```

