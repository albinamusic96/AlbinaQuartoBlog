---
title: "Midterm Part 2"
author: "Albina Music"
date: "2023-02-18"
categories: [Midterm]
---

### M2(solving problems)
## do simple math with numbers, addition, subtraction, multiplication, division
```{r}
# addition(+)
a <- 10
b <- 20
c <- a + b

print(c) 

# subtraction (-)
a <- 10
b <- 20
c <- b - a

print(c) 

# multiplication
a <- 10
b <- 20
c <- a * b

print(c)

# division
a <- 10
b <- 20
c <- b / a

print(c) 

```

## put numbers into variables, do simple math on the variables
```{r}
a <- 10
b <- 20
c <- 30

d <- e <- f <- 0

d <- a + b + c
e <- a * b * c
f <- e / d

print(d) 
print(e) 
print(f)

```

## write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function
```{r}
# using for loop
my_nums <- c()

for (i in 1:100) {
  my_nums[i] <- i
}

print(my_nums)

# using the seq function
my_nums <- seq(from = 1, to = 100, by = 1)

print(my_nums)

```

## find the sum of all the integer numbers from 1 to 100
```{r}
# using the (sum) function
total_sum <- sum(1:100)

print(total_sum)

# using a for loop
total_sum <- 0

for (i in 1:100) {
  total_sum <- total_sum + i
}

print(total_sum)

```

## write a function to find the sum of all integers between any two values
```{r}
sum_between <- function(a, b) {
  total_sum <- 0

  if (a < b) {
    start_val <- a
    end_val <- b
  } else {
    start_val <- b
    end_val <- a
  }

  for (i in start_val:end_val) {
    total_sum <- total_sum + i
  }

  return(total_sum)
}

sum1 <- sum_between(1, 10)
print(sum1)  # Output: 55

sum2 <- sum_between(50, 100)
print(sum2)  # Output: 3825

```

## list all of the odd numbers from 1 to 100
```{r}
# using a for loop 
for (i in 1:100) {
  if (i %% 2 == 1) {
    print(i)
  }
}

# using the seq function
odd_nums <- seq(from = 1, to = 100, by = 2)

print(odd_nums)

# using append
odd_nums <- c()
for (i in 1:100) {
  if (i %% 2 == 1) {
    odd_nums <- append(odd_nums, i)
  }
}

print(odd_nums)

```

## list all of the prime numbers from 1 to 1000
```{r}
is_prime <- function(n) {
  if (n < 2) {
    return(FALSE)
  }
  for (i in 2:sqrt(n)) {
    if (n %% i == 0) {
      return(FALSE)
    }
  }
  return(TRUE)
}

for (i in 1:1000) {
  if (is_prime(i)) {
    print(i)
  }
}

```

## generate 100 random numbers
```{r}
# using the runif function
rand_nums <- runif(100)

print(rand_nums)

# using the rnorm function
random_numbers <- rnorm(100, mean = 0, sd = 1)

print(random_numbers)

```

## generate 100 random numbers within a specific range
```{r}
# example 1
random_numbers <- runif(100, min = 0, max = 1)

print(random_numbers)

# example 2
random_numbers <- runif(100, min = 10, max = 85)

print(random_numbers)

```

## write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation
```{r}
## example 1
# mean
my_mean <- function(x) {
  sum(x)/length(x)
}

# mode
my_mode <- function(x) {
  table_x <- table(x)
  names(table_x)[table_x == max(table_x)]
}

# median
my_median <- function(x) {
  n <- length(x)
  if (n %% 2 == 0) {
    median <- (sort(x)[n/2] + sort(x)[n/2 + 1])/2
  } else {
    median <- sort(x)[(n + 1)/2]
  }
  median
}

# range
my_range <- function(x) {
  max(x) - min(x)
}

# standard deviation
my_sd <- function(x) {
  n <- length(x)
  mean_x <- my_mean(x)
  sqrt(sum((x - mean_x)^2)/(n - 1))
}

## example 2 
x <- rnorm(10)

mean_x <- my_mean(x)
mode_x <- my_mode(x)
median_x <- my_median(x)
range_x <- my_range(x)
sd_x <- my_sd(x)

print(mean_x)
print(mode_x)
print(median_x)
print(range_x)
print(sd_x)

```

## count the number of characters in a string variable
```{r}
# using the (nchar) function
my_string <- "Hello, world!"
nchar(my_string)

# using the (strsplit) function
a <- "adskfjhkadsjfh"
strsplit(a,split="")
#> [[1]]
#>  [1] "a" "d" "s" "k" "f" "j" "h" "k" "a" "d" "s" "j" "f" "h"

b <-strsplit(a,split="")
b[[1]] # access all elements in list 1
#>  [1] "a" "d" "s" "k" "f" "j" "h" "k" "a" "d" "s" "j" "f" "h"
b[[1]][1] # access first element of list 1
#> [1] "a"

# lists can be unlisted
d <- unlist(strsplit(a,split=""))
d  # all elements in character vector
#>  [1] "a" "d" "s" "k" "f" "j" "h" "k" "a" "d" "s" "j" "f" "h"
d[1] #first element
#> [1] "a"

```

## count the number of words in a string variable
```{r}
# using the strsplit function
a <- "this is a sentence"
strsplit(a,split=" ") # use a space as the splitting character
#> [[1]]
#> [1] "this"     "is"       "a"        "sentence"
```

## count the number of sentences in a string variable
```{r}
text <- "This is a sentence. This is another sentence. And this is a third sentence!"

num_sentences <- str_count(text, "[[:punct:]]\\s+(?=[[:upper:]])")

print(num_sentences)

```

## count the number of times a specific character occurs in a string variable
```{r}
# using the table function
a <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)

table(a)

#using the my_string function
my_string <- "This is a string with some a's in it."
count_a <- 0
for (i in 1:nchar(my_string)) {
  if (substr(my_string, i, i) == "a") {
    count_a <- count_a + 1
  }
}
count_a

```

## do a logical test to see if one word is found within the text of another string variable
```{r}
# using the test_sentence function
test_word <- "hello"
test_sentence <-"is the word hello in this sentence"

# using the (%in%) function
a <- c(1,2,3,4,5)
b <- 5
d <- 8

b%in%a

d%in%a

```

## put the current computer time in milliseconds into a variable
```{r}
current_time <- Sys.time()
current_time_milliseconds <- as.numeric(current_time) * 1000

```

## measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time
```{r}
start_time <- Sys.time()

for(i in 1:100000){
  sqrt(i)
}

end_time <- Sys.time()

total_time <- end_time - start_time
total_time

```

## read a .txt file or .csv file into a variable
```{r}
# using the read.csv function
mydata <- read.csv("matrix.csv")
```

## create a variable that stores a 20x20 matrix of random numbers
```{r}
a <- matrix(0, ncol=20,nrow=20)
```

## output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values
```{r}
m <- matrix(1:12, nrow = 3, ncol = 4)

write.csv(m, file = "matrix.csv", row.names = FALSE)

write.table(m, file = "matrix.txt", sep = "\t", row.names = FALSE)

```

### HARDER PROBLEMS
## Problem 1 (FizzBuzz)
```{r}
fizz_buzz <- function(limit) {
  for (i in 1:limit) {
    if (i %% 3 == 0 && i %% 5 == 0) {
      print("FizzBuzz")
    } else if (i %% 3 == 0) {
      print("Fizz")
    } else if (i %% 5 == 0) {
      print("Buzz")
    } else {
      print(i)
    }
  }
}

```

## Problem 1 (Encrypt and Decrypt the Alphabet)
```{r}
# to encrypt 
sub_key <- c("q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m")

message <- "hello world"

message <- tolower(message)

encrypted_message <- ""
for (i in 1:nchar(message)) {
  char <- substring(message, i, i)
  if (char %in% letters) {
    index <- match(char, letters)
    encrypted_char <- sub_key[index]
  } else {
    encrypted_char <- char
  }
  encrypted_message <- paste(encrypted_message, encrypted_char, sep = "")
}

print(encrypted_message)

# to decrypt
sub_key <- c("q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z", "x", "c", "v", "b", "n", "m")

encrypted_message <- "uryyb jbeyq"

encrypted_message <- tolower(encrypted_message)

decrypted_message <- ""
for (i in 1:nchar(encrypted_message)) {
  char <- substring(encrypted_message, i, i)
  if (char %in% letters) {
    index <- match(char, sub_key)
    decrypted_char <- letters[index]
  } else {
    decrypted_char <- char
  }
  decrypted_message <- paste(decrypted_message, decrypted_char, sep = "")
}

print(decrypted_message)

```

