[
  {
    "objectID": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "href": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "title": "Midterm Part 2",
    "section": "do simple math with numbers, addition, subtraction, multiplication, division",
    "text": "do simple math with numbers, addition, subtraction, multiplication, division\n\n# addition(+)\na <- 10\nb <- 20\nc <- a + b\n\nprint(c) \n\n[1] 30\n\n# subtraction (-)\na <- 10\nb <- 20\nc <- b - a\n\nprint(c) \n\n[1] 10\n\n# multiplication\na <- 10\nb <- 20\nc <- a * b\n\nprint(c)\n\n[1] 200\n\n# division\na <- 10\nb <- 20\nc <- b / a\n\nprint(c) \n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "href": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "title": "Midterm Part 2",
    "section": "put numbers into variables, do simple math on the variables",
    "text": "put numbers into variables, do simple math on the variables\n\na <- 10\nb <- 20\nc <- 30\n\nd <- e <- f <- 0\n\nd <- a + b + c\ne <- a * b * c\nf <- e / d\n\nprint(d) \n\n[1] 60\n\nprint(e) \n\n[1] 6000\n\nprint(f)\n\n[1] 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "href": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "title": "Midterm Part 2",
    "section": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function",
    "text": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function\n\n# using for loop\nmy_nums <- c()\n\nfor (i in 1:100) {\n  my_nums[i] <- i\n}\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n# using the seq function\nmy_nums <- seq(from = 1, to = 100, by = 1)\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "find the sum of all the integer numbers from 1 to 100",
    "text": "find the sum of all the integer numbers from 1 to 100\n\n# using the (sum) function\ntotal_sum <- sum(1:100)\n\nprint(total_sum)\n\n[1] 5050\n\n# using a for loop\ntotal_sum <- 0\n\nfor (i in 1:100) {\n  total_sum <- total_sum + i\n}\n\nprint(total_sum)\n\n[1] 5050"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "href": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "title": "Midterm Part 2",
    "section": "write a function to find the sum of all integers between any two values",
    "text": "write a function to find the sum of all integers between any two values\n\nsum_between <- function(a, b) {\n  total_sum <- 0\n\n  if (a < b) {\n    start_val <- a\n    end_val <- b\n  } else {\n    start_val <- b\n    end_val <- a\n  }\n\n  for (i in start_val:end_val) {\n    total_sum <- total_sum + i\n  }\n\n  return(total_sum)\n}\n\nsum1 <- sum_between(1, 10)\nprint(sum1)  # Output: 55\n\n[1] 55\n\nsum2 <- sum_between(50, 100)\nprint(sum2)  # Output: 3825\n\n[1] 3825"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "list all of the odd numbers from 1 to 100",
    "text": "list all of the odd numbers from 1 to 100\n\n# using a for loop \nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n# using the seq function\nodd_nums <- seq(from = 1, to = 100, by = 2)\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n\n# using append\nodd_nums <- c()\nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    odd_nums <- append(odd_nums, i)\n  }\n}\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "title": "Midterm Part 2",
    "section": "list all of the prime numbers from 1 to 1000",
    "text": "list all of the prime numbers from 1 to 1000\n\nis_prime <- function(n) {\n  if (n < 2) {\n    return(FALSE)\n  }\n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\nfor (i in 1:1000) {\n  if (is_prime(i)) {\n    print(i)\n  }\n}\n\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers",
    "text": "generate 100 random numbers\n\n# using the runif function\nrand_nums <- runif(100)\n\nprint(rand_nums)\n\n  [1] 0.005036079 0.183540743 0.732061430 0.190197325 0.982033398 0.650855637\n  [7] 0.140457187 0.290214743 0.725291067 0.430917046 0.746215438 0.970684306\n [13] 0.168505982 0.526821824 0.322396871 0.586817303 0.753894415 0.926960395\n [19] 0.329169395 0.820941705 0.001328728 0.030984927 0.246837437 0.994543774\n [25] 0.197898575 0.146857957 0.836298078 0.326387671 0.811638942 0.899980579\n [31] 0.924762965 0.263938694 0.835922996 0.755399099 0.117687644 0.355732274\n [37] 0.149023176 0.567827332 0.870785077 0.052274175 0.529308351 0.372509911\n [43] 0.177223266 0.026269958 0.100971707 0.536750339 0.924841949 0.801686800\n [49] 0.193780965 0.788514342 0.398244164 0.402856824 0.605296635 0.537880391\n [55] 0.653524098 0.316191732 0.649009550 0.156269323 0.851423515 0.809580794\n [61] 0.605258807 0.744163417 0.902414100 0.707983547 0.602795832 0.592788455\n [67] 0.801851704 0.438512736 0.453053227 0.444753316 0.862944385 0.233565557\n [73] 0.188044642 0.911586275 0.394208783 0.029495567 0.702412155 0.329304958\n [79] 0.035801875 0.524670582 0.593859415 0.274145170 0.833163826 0.061500105\n [85] 0.371182435 0.067870491 0.982486140 0.859296277 0.219521618 0.312666572\n [91] 0.895780546 0.328394203 0.653362148 0.603529659 0.531882714 0.004475989\n [97] 0.500049418 0.729731611 0.095649101 0.846347350\n\n# using the rnorm function\nrandom_numbers <- rnorm(100, mean = 0, sd = 1)\n\nprint(random_numbers)\n\n  [1]  0.50092717 -0.72164660  0.18222549 -1.26571009  1.12250704 -0.44329990\n  [7]  0.58727553  0.44800662  1.37815949  1.63430941 -0.94526845  0.58890578\n [13] -0.22510236  0.52331719 -0.62751175  0.74914946 -0.97275937 -0.22657330\n [19] -0.42391860 -0.31423020  0.96472079 -0.47032854 -1.66660589  1.30256112\n [25]  0.97974190 -0.43485473 -2.07383540 -0.12226294 -0.27801247 -1.28967883\n [31]  0.74007018 -0.11931701  0.74227760  0.57853745 -0.90368934  0.42606938\n [37] -1.69257894 -1.06374508  0.14910517 -0.71609516  1.19634537 -0.56085194\n [43]  0.09934933  0.22497702  0.08767354 -1.12747407 -1.63174191 -2.28593028\n [49]  0.91643390  0.64302922 -0.33882949 -0.30899657  0.12542079 -1.08744619\n [55]  1.86379827 -0.05960517  0.83090871  0.68932984  1.29567996 -2.39685145\n [61] -2.67457759 -0.59889478  0.56961241  1.40078491 -0.80683885  0.67539990\n [67]  0.04753137 -0.76168377  0.00382858  1.38138811  0.66190632  0.62258301\n [73] -0.06982588 -0.65399882  1.15377707  0.76944950  0.05079102 -1.64269750\n [79]  1.17883229 -0.39428330 -0.05896240  0.06441911  2.15383188  0.03704991\n [85]  1.72221564  0.13556832  1.27040300 -1.07532423 -1.39539891 -1.43662199\n [91] -2.56049865  0.54199732  0.10811705  0.47095589  1.17126366 -0.39678954\n [97] -0.10352434 -0.15012162 -2.56628511 -0.73518944"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers within a specific range",
    "text": "generate 100 random numbers within a specific range\n\n# example 1\nrandom_numbers <- runif(100, min = 0, max = 1)\n\nprint(random_numbers)\n\n  [1] 0.59712401 0.58058179 0.53759636 0.87305305 0.91932771 0.84811133\n  [7] 0.63441629 0.22349554 0.32139707 0.14988524 0.22693544 0.82824488\n [13] 0.55854381 0.33152966 0.53096108 0.71418348 0.59565259 0.52281906\n [19] 0.51816186 0.03835797 0.93640382 0.74352076 0.89860841 0.38451214\n [25] 0.16534128 0.35760759 0.36393783 0.26622037 0.46389721 0.03521962\n [31] 0.90964114 0.14964462 0.51138228 0.27886819 0.87379343 0.04714255\n [37] 0.70089400 0.65801689 0.97308181 0.61814427 0.04291832 0.43429654\n [43] 0.20623507 0.95946963 0.98602956 0.74709343 0.75805080 0.30267278\n [49] 0.24280921 0.40306419 0.26959395 0.68158151 0.34845527 0.14049783\n [55] 0.06539532 0.82431823 0.98423139 0.34284012 0.29330486 0.87336733\n [61] 0.97985745 0.67590122 0.26398151 0.48055508 0.37830370 0.17374392\n [67] 0.98301064 0.74842178 0.62053946 0.34013331 0.43561124 0.51168296\n [73] 0.51098431 0.39758545 0.49878033 0.35993092 0.75066806 0.73614343\n [79] 0.65385458 0.23987642 0.07075231 0.42341117 0.81271274 0.08468675\n [85] 0.51949145 0.31017443 0.74527249 0.53790404 0.37490041 0.30186603\n [91] 0.45965049 0.53146770 0.21534394 0.59273962 0.79047139 0.49634919\n [97] 0.24147527 0.44026154 0.21983773 0.66651646\n\n# example 2\nrandom_numbers <- runif(100, min = 10, max = 85)\n\nprint(random_numbers)\n\n  [1] 64.65240 36.25086 73.66394 13.52213 29.91597 13.89818 33.20226 69.69939\n  [9] 67.77679 66.38634 81.12249 74.38148 34.46445 37.92923 17.37680 23.01795\n [17] 73.51589 82.04072 77.19517 50.70852 41.20762 40.14262 13.43471 79.84402\n [25] 45.13884 14.62102 16.39487 36.04026 26.38426 27.85634 68.64394 76.14605\n [33] 64.21678 16.78377 71.19765 45.47659 45.10325 40.06413 31.69710 74.64906\n [41] 47.32565 27.80933 36.71329 16.46837 49.51981 13.71022 51.24088 37.30315\n [49] 70.42618 75.72347 39.91727 30.82179 37.70927 79.26537 43.37546 80.82352\n [57] 26.25631 78.09199 80.86859 59.13789 68.55911 18.40615 33.46637 14.94283\n [65] 30.13577 34.88134 33.04043 25.96393 82.70530 38.77765 71.39840 24.61482\n [73] 50.08263 42.92718 79.10827 31.84627 49.17656 35.07062 77.17618 51.20359\n [81] 25.33663 46.43443 43.65259 29.97668 34.26658 52.28467 47.19197 29.25908\n [89] 34.16286 20.63286 70.70294 73.43893 47.37362 80.38742 17.32336 65.07119\n [97] 75.53205 29.42248 28.37177 51.33372"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "href": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "title": "Midterm Part 2",
    "section": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation",
    "text": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation\n\n## example 1\n# mean\nmy_mean <- function(x) {\n  sum(x)/length(x)\n}\n\n# mode\nmy_mode <- function(x) {\n  table_x <- table(x)\n  names(table_x)[table_x == max(table_x)]\n}\n\n# median\nmy_median <- function(x) {\n  n <- length(x)\n  if (n %% 2 == 0) {\n    median <- (sort(x)[n/2] + sort(x)[n/2 + 1])/2\n  } else {\n    median <- sort(x)[(n + 1)/2]\n  }\n  median\n}\n\n# range\nmy_range <- function(x) {\n  max(x) - min(x)\n}\n\n# standard deviation\nmy_sd <- function(x) {\n  n <- length(x)\n  mean_x <- my_mean(x)\n  sqrt(sum((x - mean_x)^2)/(n - 1))\n}\n\n## example 2 \nx <- rnorm(10)\n\nmean_x <- my_mean(x)\nmode_x <- my_mode(x)\nmedian_x <- my_median(x)\nrange_x <- my_range(x)\nsd_x <- my_sd(x)\n\nprint(mean_x)\n\n[1] 0.8561326\n\nprint(mode_x)\n\n [1] \"-1.5638899693212\"   \"-0.512128035979204\" \"0.266670602476026\" \n [4] \"0.718449597576394\"  \"0.753761665464266\"  \"1.17639548926585\"  \n [7] \"1.44025771537439\"   \"1.83949996991032\"   \"2.09498024835513\"  \n[10] \"2.34732860067887\"  \n\nprint(median_x)\n\n[1] 0.9650786\n\nprint(range_x)\n\n[1] 3.911219\n\nprint(sd_x)\n\n[1] 1.214484"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of characters in a string variable",
    "text": "count the number of characters in a string variable\n\n# using the (nchar) function\nmy_string <- \"Hello, world!\"\nnchar(my_string)\n\n[1] 13\n\n# using the (strsplit) function\na <- \"adskfjhkadsjfh\"\nstrsplit(a,split=\"\")\n\n[[1]]\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#> [[1]]\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\nb <-strsplit(a,split=\"\")\nb[[1]] # access all elements in list 1\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nb[[1]][1] # access first element of list 1\n\n[1] \"a\"\n\n#> [1] \"a\"\n\n# lists can be unlisted\nd <- unlist(strsplit(a,split=\"\"))\nd  # all elements in character vector\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nd[1] #first element\n\n[1] \"a\"\n\n#> [1] \"a\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of words in a string variable",
    "text": "count the number of words in a string variable\n\n# using the strsplit function\na <- \"this is a sentence\"\nstrsplit(a,split=\" \") # use a space as the splitting character\n\n[[1]]\n[1] \"this\"     \"is\"       \"a\"        \"sentence\"\n\n#> [[1]]\n#> [1] \"this\"     \"is\"       \"a\"        \"sentence\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of times a specific character occurs in a string variable",
    "text": "count the number of times a specific character occurs in a string variable\n\n# using the table function\na <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)\n\ntable(a)\n\na\n1 2 3 4 5 6 7 \n1 3 6 4 2 1 1 \n\n#using the my_string function\nmy_string <- \"This is a string with some a's in it.\"\ncount_a <- 0\nfor (i in 1:nchar(my_string)) {\n  if (substr(my_string, i, i) == \"a\") {\n    count_a <- count_a + 1\n  }\n}\ncount_a\n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "href": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "title": "Midterm Part 2",
    "section": "do a logical test to see if one word is found within the text of another string variable",
    "text": "do a logical test to see if one word is found within the text of another string variable\n\n# using the test_sentence function\ntest_word <- \"hello\"\ntest_sentence <-\"is the word hello in this sentence\"\n\n# using the (%in%) function\na <- c(1,2,3,4,5)\nb <- 5\nd <- 8\n\nb%in%a\n\n[1] TRUE\n\nd%in%a\n\n[1] FALSE"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "href": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "title": "Midterm Part 2",
    "section": "put the current computer time in milliseconds into a variable",
    "text": "put the current computer time in milliseconds into a variable\n\ncurrent_time <- Sys.time()\ncurrent_time_milliseconds <- as.numeric(current_time) * 1000"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "href": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "title": "Midterm Part 2",
    "section": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time",
    "text": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time\n\nstart_time <- Sys.time()\n\nfor(i in 1:100000){\n  sqrt(i)\n}\n\nend_time <- Sys.time()\n\ntotal_time <- end_time - start_time\ntotal_time\n\nTime difference of 0.007119894 secs"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "href": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "title": "Midterm Part 2",
    "section": "read a .txt file or .csv file into a variable",
    "text": "read a .txt file or .csv file into a variable\n\n# using the read.csv function\nmydata <- read.csv(\"matrix.csv\")\n\nWarning in file(file, \"rt\"): cannot open file 'matrix.csv': No such file or\ndirectory\n\n\nError in file(file, \"rt\"): cannot open the connection"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "href": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "title": "Midterm Part 2",
    "section": "create a variable that stores a 20x20 matrix of random numbers",
    "text": "create a variable that stores a 20x20 matrix of random numbers\n\na <- matrix(0, ncol=20,nrow=20)"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "href": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "title": "Midterm Part 2",
    "section": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values",
    "text": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values\n\nm <- matrix(1:12, nrow = 3, ncol = 4)\n\nwrite.csv(m, file = \"matrix.csv\", row.names = FALSE)\n\nwrite.table(m, file = \"matrix.txt\", sep = \"\\t\", row.names = FALSE)\n\n\nHARDER PROBLEMS"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "href": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "title": "Midterm Part 2",
    "section": "Problem 1 (FizzBuzz)",
    "text": "Problem 1 (FizzBuzz)\n\nfizz_buzz <- function(limit) {\n  for (i in 1:limit) {\n    if (i %% 3 == 0 && i %% 5 == 0) {\n      print(\"FizzBuzz\")\n    } else if (i %% 3 == 0) {\n      print(\"Fizz\")\n    } else if (i %% 5 == 0) {\n      print(\"Buzz\")\n    } else {\n      print(i)\n    }\n  }\n}"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "href": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "title": "Midterm Part 2",
    "section": "Problem 1 (Encrypt and Decrypt the Alphabet)",
    "text": "Problem 1 (Encrypt and Decrypt the Alphabet)\n\n# to encrypt \nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nmessage <- \"hello world\"\n\nmessage <- tolower(message)\n\nencrypted_message <- \"\"\nfor (i in 1:nchar(message)) {\n  char <- substring(message, i, i)\n  if (char %in% letters) {\n    index <- match(char, letters)\n    encrypted_char <- sub_key[index]\n  } else {\n    encrypted_char <- char\n  }\n  encrypted_message <- paste(encrypted_message, encrypted_char, sep = \"\")\n}\n\nprint(encrypted_message)\n\n[1] \"itssg vgksr\"\n\n# to decrypt\nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nencrypted_message <- \"uryyb jbeyq\"\n\nencrypted_message <- tolower(encrypted_message)\n\ndecrypted_message <- \"\"\nfor (i in 1:nchar(encrypted_message)) {\n  char <- substring(encrypted_message, i, i)\n  if (char %in% letters) {\n    index <- match(char, sub_key)\n    decrypted_char <- letters[index]\n  } else {\n    decrypted_char <- char\n  }\n  decrypted_message <- paste(decrypted_message, decrypted_char, sep = \"\")\n}\n\nprint(decrypted_message)\n\n[1] \"gdffx qxcfa\""
  },
  {
    "objectID": "posts/tip sheet/index.html",
    "href": "posts/tip sheet/index.html",
    "title": "tip sheet",
    "section": "",
    "text": "put your tips here"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AlbinaQuartoBlog",
    "section": "",
    "text": "Logic, Loops, and Functions\n\n\n\n\n\n\n\n\n\n\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 13\n\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday 2\n\n\n\n\n\n\n\ntidytues\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday 1\n\n\n\n\n\n\n\ntidytues\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 11\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 9 Report\n\n\n\n\n\n\n\nreport\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Part 1\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n  \n\n\n\n\nWeek 3\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 12\n\n\n\n\n\n\n\nfinal project example\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Part 2\n\n\n\n\n\n\n\nMidterm\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntip sheet\n\n\n\n\n\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nAlbina Music\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/week_13/index.html#slide-1",
    "href": "posts/week_13/index.html#slide-1",
    "title": "Week 13",
    "section": "Slide 1",
    "text": "Slide 1\n\nstuff\nstuff"
  },
  {
    "objectID": "posts/week_13/index.html#slide-2",
    "href": "posts/week_13/index.html#slide-2",
    "title": "Week 13",
    "section": "Slide 2",
    "text": "Slide 2\n\nstuff\nstuff"
  },
  {
    "objectID": "posts/week_8/index.html",
    "href": "posts/week_8/index.html",
    "title": "Week 8",
    "section": "",
    "text": "customers <- tibble(\n  id = 1:5,\n  city = c(\"Port Ellen\", \"Dufftown\", NA, \"Aberlour\", \"Tobermory\"),\n  postcode = c(\"PA42 7DU\", \"AB55 4DH\", NA, \"AB38 7RY\", \"PA75 6NR\")\n)"
  },
  {
    "objectID": "posts/week_8/index.html#what-does-dylyr-mutate-do",
    "href": "posts/week_8/index.html#what-does-dylyr-mutate-do",
    "title": "Week 8",
    "section": "what does dylyr mutate do?",
    "text": "what does dylyr mutate do?\n\norders_B <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)\n# add new columns \norders_B %>%\n  mutate(satisfaction = NA,\n         number = 1:9)\n\n# A tibble: 9 × 4\n     id items satisfaction number\n  <dbl> <dbl> <lgl>         <int>\n1     2    10 NA                1\n2     3    18 NA                2\n3     4    21 NA                3\n4     4    23 NA                4\n5     5     9 NA                5\n6     5    11 NA                6\n7     6    11 NA                7\n8     6    12 NA                8\n9     7     3 NA                9\n\n# assign back to tibble\n\norders_B <- orders_B %<%\n  mutate(satisfaction = NA,\n         numbers = 1:9)\n\nError in orders_B %<% mutate(satisfaction = NA, numbers = 1:9): could not find function \"%<%\"\n\n# convert to strings(characters)\n\norders_B %<%\n  mutate(numbers_as_strings = as.character(numbers))\n\nError in orders_B %<% mutate(numbers_as_strings = as.character(numbers)): could not find function \"%<%\""
  },
  {
    "objectID": "posts/week_8/index.html#left-join",
    "href": "posts/week_8/index.html#left-join",
    "title": "Week 8",
    "section": "left join",
    "text": "left join\n\nleft_data <- left_join(customers, orders, by = \"id\")\nleft_data\n\n# A tibble: 7 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     2 Dufftown   AB55 4DH    10\n3     3 <NA>       <NA>        18\n4     4 Aberlour   AB38 7RY    21\n5     4 Aberlour   AB38 7RY    23\n6     5 Tobermory  PA75 6NR     9\n7     5 Tobermory  PA75 6NR    11"
  },
  {
    "objectID": "posts/week_8/index.html#right-join",
    "href": "posts/week_8/index.html#right-join",
    "title": "Week 8",
    "section": "right join",
    "text": "right join\n\nright_data <- right_join(customers, orders, by = \"id\")\nright_data\n\n# A tibble: 9 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11\n7     6 <NA>      <NA>        11\n8     6 <NA>      <NA>        12\n9     7 <NA>      <NA>         3"
  },
  {
    "objectID": "posts/week_8/index.html#inner-joins",
    "href": "posts/week_8/index.html#inner-joins",
    "title": "Week 8",
    "section": "inner joins",
    "text": "inner joins\n\ninner_data <- inner_join(customers, orders, by = \"id\")\ninner_data\n\n# A tibble: 6 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11"
  },
  {
    "objectID": "posts/week_8/index.html#full-join",
    "href": "posts/week_8/index.html#full-join",
    "title": "Week 8",
    "section": "full join",
    "text": "full join\n\nfull_data <- full_join(customers, orders, by = \"id\")\nfull_data\n\n# A tibble: 10 × 4\n      id city       postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3"
  },
  {
    "objectID": "posts/week_8/index.html#filtering-joins",
    "href": "posts/week_8/index.html#filtering-joins",
    "title": "Week 8",
    "section": "filtering joins",
    "text": "filtering joins\n\nsemi_data <- semi_join(customers, orders, by = \"id\")\nsemi_data\n\n# A tibble: 4 × 3\n     id city      postcode\n  <int> <chr>     <chr>   \n1     2 Dufftown  AB55 4DH\n2     3 <NA>      <NA>    \n3     4 Aberlour  AB38 7RY\n4     5 Tobermory PA75 6NR"
  },
  {
    "objectID": "posts/week_12_tidy_tues_1/index.html",
    "href": "posts/week_12_tidy_tues_1/index.html",
    "title": "Tidy Tuesday 1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(dplyr)\n\ntuesdata <- tidytuesdayR::tt_load('2023-05-02')\n\n--- Compiling #TidyTuesday Information for 2023-05-02 ----\n--- There are 3 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 3: `plots.csv`\n    Downloading file 2 of 3: `species.csv`\n    Downloading file 3 of 3: `surveys.csv`\n\n\n--- Download complete ---\n\nplots <- tuesdata$plots\nspecies <- tuesdata$species\nsurveys <- tuesdata$surveys"
  },
  {
    "objectID": "posts/week_12_tidy_tues_1/index.html#mice-per-year",
    "href": "posts/week_12_tidy_tues_1/index.html#mice-per-year",
    "title": "Tidy Tuesday 1",
    "section": "mice per year",
    "text": "mice per year\n\nmice_count_by_year<-surveys %>%\n  group_by(year) %>%\n  count()\n\nggplot(mice_count_by_year, aes(x=year, y=n))+\n  geom_line()+\n  geom_point()+\n  ggtitle(\"Mice Count By Year\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))"
  },
  {
    "objectID": "posts/week_12_tidy_tues_1/index.html#mice-per-year-by-sex",
    "href": "posts/week_12_tidy_tues_1/index.html#mice-per-year-by-sex",
    "title": "Tidy Tuesday 1",
    "section": "mice per year by sex",
    "text": "mice per year by sex\n\nmice_count_by_year_sex <- surveys %>%\n  group_by(year,sex) %>%\n  count()\nggplot(mice_count_by_year_sex, aes(x= year, y=n, color=sex))+\n  geom_line() +\n  ggtitle(\"Mice count by year and sex\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))"
  },
  {
    "objectID": "posts/week_12_tidy_tues_1/index.html#mice-per-year-by-species",
    "href": "posts/week_12_tidy_tues_1/index.html#mice-per-year-by-species",
    "title": "Tidy Tuesday 1",
    "section": "mice per year by species",
    "text": "mice per year by species\n\nmice_count_by_year_species <- surveys %>%\n  group_by(year,species) %>%\n  count()\n\nggplot(mice_count_by_year_species, aes(x=year, \n                                       y=n,\n                                       color=species,\n                                       linetype=species))+\n  geom_line()+\n  ggtitle(\"Mice Count By Year\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))\n\n\n\n\n\nggplot(mice_count_by_year_species, aes(x= year, \n                                       y=n, \n                                       color=species))+\n  geom_line() +\n  geom_point() +\n  ggtitle(\"Mice count by year and species\")+\n  scale_x_continuous(breaks=seq(1980,2020,5)) +\n  facet_wrap(~species)"
  },
  {
    "objectID": "posts/week_12_tidy_tues_1/index.html#pregnancy-by-month",
    "href": "posts/week_12_tidy_tues_1/index.html#pregnancy-by-month",
    "title": "Tidy Tuesday 1",
    "section": "Pregnancy by month",
    "text": "Pregnancy by month\n\nmonthly_data <- surveys %>%\n  mutate(month_string = lubridate::month(censusdate,label= T)) %>%\n  group_by(month) %>%\n  count(pregnant) %>%\n  pivot_wider(names_from=pregnant, values_from = n) %>%\n  mutate(proportion_pregnant = P/(P+`NA`))\n\nggplot(monthly_data, aes(x=month, y=proportion_pregnant))+\n  geom_line()"
  },
  {
    "objectID": "posts/week_12_tidy_tues_2/index.html",
    "href": "posts/week_12_tidy_tues_2/index.html",
    "title": "Tidy Tuesday 2",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(tidytuesdayR)\nlibrary(dplyr)\nlibrary(wordcloud)\n\nLoading required package: RColorBrewer\n\nlibrary(ggplot2)\n\ntuesdata <- tidytuesdayR::tt_load('2023-02-21')\n\n--- Compiling #TidyTuesday Information for 2023-02-21 ----\n--- There is 1 file available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `bob_ross.csv`\n\n\n--- Download complete ---\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 8)\n\n--- Compiling #TidyTuesday Information for 2023-02-21 ----\n--- There is 1 file available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `bob_ross.csv`\n\n\n--- Download complete ---\n\nbob_ross <- tuesdata$bob_ross\n\n\nggplot(bob_ross, aes(x=num_colors))+\n  geom_histogram(fill = \"lightblue\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nggplot(bob_ross, aes(x=num_colors))+\n  geom_bar(fill = \"steelblue\")\n\n\n\n\n\nbob_ross_longer <- bob_ross %>%\n  pivot_longer(10:27) %>%\n  group_by(name) %>%\n  summarize(count = sum(value))"
  },
  {
    "objectID": "posts/week_4/index.html",
    "href": "posts/week_4/index.html",
    "title": "Week 4",
    "section": "",
    "text": "Get some data in tidy data format\nUnderstand what kind of data types you have in the dataframe so you can plot it appropriately\nGraph the data with ggplot2"
  },
  {
    "objectID": "posts/week_4/index.html#data-types",
    "href": "posts/week_4/index.html#data-types",
    "title": "Week 4",
    "section": "Data-types",
    "text": "Data-types\nWhat is in a name?\nEverything is a function.\n\nObject assignment\nThis is one of the simplest things you could do in R. What is happening here?\n\na is the name of a new object that is being created\n<- is the assignment operator. It looks like an arrow, with the 1 going into the a\n1 is an object that is being assigned into a\nconsequences: a new object with the name a is created. This new object has been assigned the content 1.\n\n\n# assign 1 to object named a\na <- 1\n1 -> b\n\nf <- 4 -> g\n\n\n# look at the data type of object in a\nclass(a)\n\n[1] \"numeric\"\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\n\nKinds of data types\n\nIntegers\n\n#integers (no decimals)\n# L specifies integer\ntypeof(1L) \n\n[1] \"integer\"\n\nclass(1L)\n\n[1] \"integer\"\n\nis.integer(1L)\n\n[1] TRUE\n\nas.integer(1.1) # coerces to integer\n\n[1] 1\n\nas.integer(1.5) # rounds down\n\n[1] 1\n\nas.integer(1.9) # rounds down\n\n[1] 1\n\ninteger(length = 5) #initialize a vector for integers\n\n[1] 0 0 0 0 0\n\nis.integer(as.integer(1:5))\n\n[1] TRUE\n\n\n\n\nNumeric/doubles\n\n# decimal numbers\n# numbers without decimals default to numeric\ntypeof(1) \n\n[1] \"double\"\n\nclass(1)\n\n[1] \"numeric\"\n\nis.numeric(1)\n\n[1] TRUE\n\nas.numeric(1L) # coerces integer to numeric\n\n[1] 1\n\nnumeric(length = 5) #initialize a vector for doubles\n\n[1] 0 0 0 0 0\n\n\n\n\nCharacter\nAny text between quotes get’s treated as a character string\n\ntypeof(\"1\") \n\n[1] \"character\"\n\nclass(\"1\")\n\n[1] \"character\"\n\nis.character(\"1\")\n\n[1] TRUE\n\nas.character(1) # coerces numeric to character\n\n[1] \"1\"\n\ncharacter(length = 5) #initialize a vector for character strings\n\n[1] \"\" \"\" \"\" \"\" \"\"\n\n\n\n\nLogical/Boolean\nUppercase TRUE, or FALSE makes logical (binary) variables\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\nclass(TRUE)\n\n[1] \"logical\"\n\nis.logical(FALSE)\n\n[1] TRUE\n\nas.logical(1) # coerces 1 to TRUE\n\n[1] TRUE\n\nas.logical(0) # coerces 0  to FALSE\n\n[1] FALSE\n\nlogical(length = 5) # initialize a logical vector\n\n[1] FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\nObject types\nR has many object types to store individual elements, or collections of elements.\n\n\nVector\n\n# makes a vector with one thing in it\none_thing <- 1\ntwo_things <- c(1,2) \nmany_things <- 1:100\n\n\n\ndata.frame\nA table with rows and columns.\n\nmy_df <- data.frame(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n\n  a     b    random\n1 1   one 0.6431599\n2 2   two 0.1306400\n3 3 three 0.2753763\n4 4  four 0.7479707\n5 5  five 0.4243727\n\n# access columns with $\nmy_df$a == 1:5\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\nmy_df$b\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n\n  a   b    random\n1 1 one 0.6431599\n\nmy_df[,1] # column 1, all rows\n\n[1] 1 2 3 4 5\n\nmy_df[1:2,] # rows 1 to 2, all columns\n\n  a   b    random\n1 1 one 0.6431599\n2 2 two 0.1306400\n\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n\n[1] 0.6431599 0.1306400\n\n\n\n\nTibble\nA table with rows and columns.\n\nmy_df <- tibble(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.415\n2     2 two    0.699\n3     3 three  0.501\n4     4 four   0.636\n5     5 five   0.511\n\n# access columns with $\nmy_df$a\n\n[1] 1 2 3 4 5\n\nmy_df$b\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n\n# A tibble: 1 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.415\n\nmy_df[,1] # column 1, all rows\n\n# A tibble: 5 × 1\n      a\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n\nmy_df[1:2,] # rows 1 to 2, all columns\n\n# A tibble: 2 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.415\n2     2 two    0.699\n\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n\n# A tibble: 2 × 1\n  random\n   <dbl>\n1  0.415\n2  0.699\n\nmy_df\n\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.415\n2     2 two    0.699\n3     3 three  0.501\n4     4 four   0.636\n5     5 five   0.511\n\n\n\n\nlists"
  },
  {
    "objectID": "posts/week_4/index.html#tidy-data",
    "href": "posts/week_4/index.html#tidy-data",
    "title": "Week 4",
    "section": "Tidy data",
    "text": "Tidy data\nTidy data codes observations in a table. Each observation has its own row. The columns contain characteristics of the observation. For example, a demographics table could have one row per person, and several columns describing features of the person. Or, an expriment may involve multiple measures of a dependent variable across people and conditions of an independent variable. In this case, each row would contain one measurement, and each column would code the conditions associated with the measurement.\nAn example of wide vs. long data. In this example, the long-data is in tidy format. The accuracy measure is the dependent variable, and there is one row per measurement.\nhttps://crumplab.com/programmingforpsych/dealing-with-data.html#standard-data-formats"
  },
  {
    "objectID": "posts/week_4/index.html#ggplot2",
    "href": "posts/week_4/index.html#ggplot2",
    "title": "Week 4",
    "section": "ggplot2",
    "text": "ggplot2\n\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_category\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>         \n1 C001      E01         2020-09-22 10:47:54       169        34 tech          \n2 C002      E01         2020-09-07 22:10:25       206        52 tech          \n3 C003      E01         2020-07-06 12:08:59       207        41 tech          \n4 C004      E01         2020-02-20 13:12:03       132        16 tech          \n5 C005      E01         2020-11-08 17:42:10       178        20 returns       \n6 C006      E01         2020-06-01 19:06:12       230        46 returns       \n# ℹ 1 more variable: satisfaction <dbl>\n\nggplot()\n\n\n\nggplot(data = survey_data,\n       mapping = aes(x = wait_time,\n                     y = satisfaction)\n       )\n\n\n\nggplot(survey_data, aes(x = wait_time, y = satisfaction))\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point()\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"red\")\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"black\", size = 5) +\n   geom_point(color=\"#fa2fcb\", size = 4) +\n  geom_smooth(method =\"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction,\n           color = wait_time,\n           size = satisfaction)) + \n  geom_point()\n\n\n\nmin(survey_data$wait_time)\n\n[1] 23\n\nmax(survey_data$wait_time)\n\n[1] 314\n\nlength(survey_data$wait_time)\n\n[1] 707\n\nggplot(data=survey_data, mapping= aes(x=wait_time))+\n  geom_histogram(bins=50, color=\"red\") +\n  theme_classic()"
  },
  {
    "objectID": "posts/week_4/index.html#change-figure-output-size",
    "href": "posts/week_4/index.html#change-figure-output-size",
    "title": "Week 4",
    "section": "change figure output size",
    "text": "change figure output size\n\nggplot(data=survey_data, mapping= aes(x=wait_time))+\n  geom_histogram(bins=50, color=\"red\") +\n  theme_classic()"
  },
  {
    "objectID": "posts/week_4/index.html#random-stuff-i-did-in-class",
    "href": "posts/week_4/index.html#random-stuff-i-did-in-class",
    "title": "Week 4",
    "section": "Random stuff I did in class",
    "text": "Random stuff I did in class\n\ntypeof(10.0245435234534)\n\n[1] \"double\"\n\ntypeof(10L)\n\n[1] \"integer\"\n\ntypeof(10)\n\n[1] \"double\"\n\ntypeof(\"1\")\n\n[1] \"character\"\n\n\"one\" < \"two\"\n\n[1] TRUE\n\n\"z\" < \"w\"\n\n[1] FALSE\n\nis.numeric(10)\n\n[1] TRUE\n\nis.numeric(\"1\")\n\n[1] FALSE\n\na <- c(1,2,3)\nis.numeric(a)\n\n[1] TRUE\n\nis.numeric(starwars$name)\n\n[1] FALSE\n\nis.numeric(starwars$mass)\n\n[1] TRUE\n\nis.numeric(starwars$height)\n\n[1] TRUE\n\nis.integer(starwars$height)\n\n[1] TRUE\n\nclass(starwars$height)\n\n[1] \"integer\"\n\nhead(starwars)\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 <NA>       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n\nclass(starwars)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(starwars_copy)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nlibrary(tidyverse)\n\nclass(starwars)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nstarwars\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n\nstarwars_copy <- starwars\n\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/week_6/index.html",
    "href": "posts/week_6/index.html",
    "title": "Week 6",
    "section": "",
    "text": "tweets <- readRDS(\"ncod_tweets.rds\")"
  },
  {
    "objectID": "posts/week_6/index.html#summarise",
    "href": "posts/week_6/index.html#summarise",
    "title": "Week 6",
    "section": "5.2 Summarise",
    "text": "5.2 Summarise\nThis is a function from the dplyr package.\n\nlibrary(tidyverse) #loads dplyr as well\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nfavourite_summary <- summarise(tweets, # name of the data table\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count))\n\nknitr::kable(favourite_summary) #print output\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\n\n\n\n\n29.71732\n3\n0\n22935\n\n\n\n\n\nWe can add as many new functions as we want. Each one will apply a function of choice to the named column.\nFor example, if wanted the standard deviation of the values in the column named favorite_count, then we added sd_favs = sd(favorite_count).\n\nfavourite_summary <- summarise(tweets,\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count),\n                           sd_favs = sd(favorite_count),\n                           mean_RTs = mean(retweet_count),\n                           median_RTs = median(retweet_count),\n                           min_RTs = min(retweet_count),\n                           max_RTs = max(retweet_count),\n                           sd_RTs = sd(favorite_count))\n\nknitr::kable(favourite_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\nsd_favs\nmean_RTs\nmedian_RTs\nmin_RTs\nmax_RTs\nsd_RTs\n\n\n\n\n29.71732\n3\n0\n22935\n329.9982\n3.166632\n0\n0\n2525\n329.9982\n\n\n\n\n\nExample of plotting a histogram of the favorite counts, in log scale.\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\nAnother example of adding individual functions to summarise.\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(), # count all rows\n            min_date = min(created_at), # find the minimum date\n            max_date = max(created_at)) # find the maximum date\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\nExample of writing inline code.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nThere were 28626 tweets between 10 October, 2021 and 12 October, 2021."
  },
  {
    "objectID": "posts/week_6/index.html#pipes",
    "href": "posts/week_6/index.html#pipes",
    "title": "Week 6",
    "section": "5.3.2 Pipes",
    "text": "5.3.2 Pipes\nExample of using the pipe operate syntax %>%.\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\n\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/week_6/index.html#counting",
    "href": "posts/week_6/index.html#counting",
    "title": "Week 6",
    "section": "5.4 Counting",
    "text": "5.4 Counting\nThe count function counts the number of times each unique item occurs in a column. This is an example appplied to the screen_name column, which contains twitter usernames.\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\n\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/week_6/index.html#grouping",
    "href": "posts/week_6/index.html#grouping",
    "title": "Week 6",
    "section": "5.5 Grouping",
    "text": "5.5 Grouping\nTwo ways to use the group_by function. Here we produce summaries for each level in the verified column.\n\ntweets_grouped <- tweets %>%\n  group_by(verified)\n\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282\n\n\n\n\n\n\nverified <- tweets %>%\n  group_by(verified) %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282"
  }
]