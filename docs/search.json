[
  {
    "objectID": "posts/week_9_report/index.html",
    "href": "posts/week_9_report/index.html",
    "title": "Week 9 Report",
    "section": "",
    "text": "#load libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n#load the data\nreview_data <- rio::import(\"data_report/review_data.csv\")"
  },
  {
    "objectID": "posts/week_9_report/index.html#number-of-reviews-by-year",
    "href": "posts/week_9_report/index.html#number-of-reviews-by-year",
    "title": "Week 9 Report",
    "section": "number of reviews by year",
    "text": "number of reviews by year"
  },
  {
    "objectID": "posts/week_9_report/index.html#verified-usersthe-dataset-contains-details-of-whether-the-review-was-based-on-a-verified-purchase-from-amazon-community",
    "href": "posts/week_9_report/index.html#verified-usersthe-dataset-contains-details-of-whether-the-review-was-based-on-a-verified-purchase-from-amazon-community",
    "title": "Week 9 Report",
    "section": "verified users(the dataset contains details of whether the review was based on a verified purchase, from Amazon Community)",
    "text": "verified users(the dataset contains details of whether the review was based on a verified purchase, from Amazon Community)\n\n\n\n\nTable 1: Number of reviews by purchase status\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645"
  },
  {
    "objectID": "posts/week_9_report/index.html#number-of-reviews-per-year",
    "href": "posts/week_9_report/index.html#number-of-reviews-per-year",
    "title": "Week 9 Report",
    "section": "number of reviews per year",
    "text": "number of reviews per year\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/week_9_report/index.html#number-of-reviews-per-rating",
    "href": "posts/week_9_report/index.html#number-of-reviews-per-rating",
    "title": "Week 9 Report",
    "section": "number of reviews per rating",
    "text": "number of reviews per rating"
  },
  {
    "objectID": "posts/week_9_report/index.html#number-of-reviews-per-year-1",
    "href": "posts/week_9_report/index.html#number-of-reviews-per-year-1",
    "title": "Week 9 Report",
    "section": "number of reviews per year",
    "text": "number of reviews per year\n\n#Get number of reviews per year\n\nrating_by_verified_counts <- review_data %>%\n  group_by(rating,verified) %>%\n  summarize(counts = n())\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument.\n\n#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))\n#ggplot(reviews_by_year, aes(x=year, y=counts))\n\n# plot\nggplot(data = rating_by_verified_counts, \n       mapping = aes(x=rating, \n                     y=counts, \n                     group = verified,\n                     fill = verified))+\n  geom_bar(stat= \"identity\", position = \"dodge\")+\n  xlab(\"\")+\n  ylab(\"\")+\n  ggtitle(\"Review Ratings\",\n          subtitle = \"By purchase status\")+\n  theme(\n    panel.background = element_rect(fill = \"lightgrey\",\n                                colour = \"lightgrey\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/week_12/index.html",
    "href": "posts/week_12/index.html",
    "title": "Week 12",
    "section": "",
    "text": "library(tidyverse)   # data wrangling functions\nlibrary(ggthemes)    # for themes\nlibrary(patchwork)   # for combining plots\nlibrary(plotly)      # for interactive plots\n# devtools::install_github(\"hrbrmstr/waffle\")\nlibrary(waffle)      # for waffle plots\nlibrary(ggbump)      # for bump plots\nlibrary(treemap)     # for treemap plots\nlibrary(ggwordcloud) # for word clouds\nlibrary(tidytext)    # for manipulating text for word clouds\nlibrary(sf)          # for mapping geoms\nlibrary(rnaturalearth) # for map data\nlibrary(rnaturalearthdata) # extra mapping data\nlibrary(gganimate)   # for animated plots\n\ntheme_set(theme_light())"
  },
  {
    "objectID": "posts/week_12/index.html#annotations",
    "href": "posts/week_12/index.html#annotations",
    "title": "Week 12",
    "section": "annotations",
    "text": "annotations\n\nbar +\n  # add left-justified text to the second bar\n  annotate(geom = \"text\",\n           label = \"Our goal is to\\nreduce this\\ncategory\",\n           x = 1.65, y = 150,\n           hjust = 0, vjust = 1, \n           color = \"white\", fontface = \"bold\",\n           angle = 45) +\n  # add a centred label to the third bar\n  annotate(geom = \"label\",\n           label = \"Our goal is\\nto increase this\\ncategory\",\n           x = 3, y = 75,\n           hjust = 0.5, vjust = 1, \n           color = \" darkturquoise\", fontface = \"bold\")\n\n\npoint +\n  # add a rectangle surrounding long call times\n  annotate(geom = \"rect\",\n           xmin = 100, xmax = 275,\n           ymin = 140, ymax = 180,\n           fill = \"transparent\", color = \"red\") +\n  # add a text label\n  annotate(\"text\",\n           x = 260, y = 120,\n           label = \"outliers\") +\n  # add an line with an arrow from the text to the box\n  annotate(geom = \"segment\", \n           x = 240, y = 120, \n           xend = 200, yend = 135,\n           arrow = arrow(length = unit(0.5, \"lines\"))) +\n  # add a curved line with an arrow \n  # from the text to a wait time outlier\n  annotate(geom = \"curve\", \n          x = 280, y = 120, \n          xend = 320, yend = 45,\n          curvature = -0.5,\n          arrow = arrow(length = unit(0.5, \"lines\")))"
  },
  {
    "objectID": "posts/week_12/index.html#other-plots",
    "href": "posts/week_12/index.html#other-plots",
    "title": "Week 12",
    "section": "other plots",
    "text": "other plots\n\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        show_col_types = FALSE)\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()\n\n\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_freqpoly(boundary = 0, binwidth = 15, \n                color = \"black\")\n\n\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_density(fill = \"purple\", color = \"black\")"
  },
  {
    "objectID": "posts/week_12/index.html#interactive-plots",
    "href": "posts/week_12/index.html#interactive-plots",
    "title": "Week 12",
    "section": "interactive plots",
    "text": "interactive plots\n\nggplotly(point)\n\n\ndevtools::install_github(\"hrbrmstr/waffle\")"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "href": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "title": "Midterm Part 2",
    "section": "do simple math with numbers, addition, subtraction, multiplication, division",
    "text": "do simple math with numbers, addition, subtraction, multiplication, division\n\n# addition(+)\na <- 10\nb <- 20\nc <- a + b\n\nprint(c) \n\n[1] 30\n\n# subtraction (-)\na <- 10\nb <- 20\nc <- b - a\n\nprint(c) \n\n[1] 10\n\n# multiplication\na <- 10\nb <- 20\nc <- a * b\n\nprint(c)\n\n[1] 200\n\n# division\na <- 10\nb <- 20\nc <- b / a\n\nprint(c) \n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "href": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "title": "Midterm Part 2",
    "section": "put numbers into variables, do simple math on the variables",
    "text": "put numbers into variables, do simple math on the variables\n\na <- 10\nb <- 20\nc <- 30\n\nd <- e <- f <- 0\n\nd <- a + b + c\ne <- a * b * c\nf <- e / d\n\nprint(d) \n\n[1] 60\n\nprint(e) \n\n[1] 6000\n\nprint(f)\n\n[1] 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "href": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "title": "Midterm Part 2",
    "section": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function",
    "text": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function\n\n# using for loop\nmy_nums <- c()\n\nfor (i in 1:100) {\n  my_nums[i] <- i\n}\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n# using the seq function\nmy_nums <- seq(from = 1, to = 100, by = 1)\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "find the sum of all the integer numbers from 1 to 100",
    "text": "find the sum of all the integer numbers from 1 to 100\n\n# using the (sum) function\ntotal_sum <- sum(1:100)\n\nprint(total_sum)\n\n[1] 5050\n\n# using a for loop\ntotal_sum <- 0\n\nfor (i in 1:100) {\n  total_sum <- total_sum + i\n}\n\nprint(total_sum)\n\n[1] 5050"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "href": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "title": "Midterm Part 2",
    "section": "write a function to find the sum of all integers between any two values",
    "text": "write a function to find the sum of all integers between any two values\n\nsum_between <- function(a, b) {\n  total_sum <- 0\n\n  if (a < b) {\n    start_val <- a\n    end_val <- b\n  } else {\n    start_val <- b\n    end_val <- a\n  }\n\n  for (i in start_val:end_val) {\n    total_sum <- total_sum + i\n  }\n\n  return(total_sum)\n}\n\nsum1 <- sum_between(1, 10)\nprint(sum1)  # Output: 55\n\n[1] 55\n\nsum2 <- sum_between(50, 100)\nprint(sum2)  # Output: 3825\n\n[1] 3825"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "list all of the odd numbers from 1 to 100",
    "text": "list all of the odd numbers from 1 to 100\n\n# using a for loop \nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n# using the seq function\nodd_nums <- seq(from = 1, to = 100, by = 2)\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n\n# using append\nodd_nums <- c()\nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    odd_nums <- append(odd_nums, i)\n  }\n}\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "title": "Midterm Part 2",
    "section": "list all of the prime numbers from 1 to 1000",
    "text": "list all of the prime numbers from 1 to 1000\n\nis_prime <- function(n) {\n  if (n < 2) {\n    return(FALSE)\n  }\n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\nfor (i in 1:1000) {\n  if (is_prime(i)) {\n    print(i)\n  }\n}\n\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers",
    "text": "generate 100 random numbers\n\n# using the runif function\nrand_nums <- runif(100)\n\nprint(rand_nums)\n\n  [1] 0.537392160 0.381179022 0.113398973 0.974760720 0.093327996 0.901190103\n  [7] 0.529180399 0.448824899 0.635544255 0.351170922 0.549191403 0.585270015\n [13] 0.907362988 0.721227803 0.016722095 0.069109890 0.442123420 0.269403039\n [19] 0.974533267 0.900471758 0.648048777 0.880047734 0.898907208 0.463053815\n [25] 0.927050439 0.636372252 0.062198963 0.869094931 0.209317259 0.407079123\n [31] 0.991599716 0.971994986 0.352060219 0.456773935 0.087728833 0.798727108\n [37] 0.644973734 0.802463866 0.885654693 0.650576136 0.862418580 0.126974812\n [43] 0.398222953 0.197290575 0.316844648 0.004392612 0.002827291 0.575859059\n [49] 0.622502246 0.709783277 0.445219987 0.133216562 0.999724193 0.010541799\n [55] 0.647719056 0.361398346 0.532331097 0.806898296 0.524515020 0.185222841\n [61] 0.186139207 0.388778531 0.053053949 0.274274201 0.589779013 0.014378782\n [67] 0.763342604 0.263173729 0.879450649 0.694881904 0.309386540 0.494669121\n [73] 0.382545028 0.868809687 0.851629490 0.186799904 0.636102591 0.955198377\n [79] 0.099587729 0.151482880 0.880414376 0.760537803 0.367160266 0.912775295\n [85] 0.928703013 0.892028503 0.091870700 0.310125761 0.496322671 0.451077587\n [91] 0.637056102 0.463130089 0.671893928 0.330047243 0.455739512 0.857025319\n [97] 0.487496559 0.695552390 0.476932811 0.104413666\n\n# using the rnorm function\nrandom_numbers <- rnorm(100, mean = 0, sd = 1)\n\nprint(random_numbers)\n\n  [1]  2.769032530 -0.052834311  0.228279753  1.076795472  0.720458283\n  [6]  0.480475861  0.490929975  0.637772879 -2.007600177 -0.297893154\n [11]  1.158693768  1.372720659  0.525846782 -0.129452588 -1.415120189\n [16]  0.049951473  0.439976174 -0.711194279  1.635020774  0.551863459\n [21] -0.335710799 -0.059214435  1.852050220  0.716786564  1.023260566\n [26]  1.224081536 -0.215587485  0.434655344  0.354981339 -1.936774018\n [31]  0.806362535  1.400794691  0.827339615  0.006488173 -1.811875679\n [36] -0.413471637 -0.552497503 -0.052271599 -0.140694451  0.831273086\n [41]  0.795315835  0.639430231  0.410287221  0.792473654  0.688611669\n [46] -1.015276260  1.186296062 -1.375890886  0.652751744  0.891138828\n [51] -0.573675518 -0.537919735  0.477620076  0.585538979 -1.741861141\n [56]  0.314716548 -0.930067889 -2.017124306  1.444913377  1.236833821\n [61] -1.329502965  1.434264950  0.425161737  0.109302103 -1.256857535\n [66] -0.707681029  1.068602929 -0.668234504  1.574198220 -0.124918767\n [71] -0.574641809 -0.979798479 -0.205011092 -0.370414536  0.710356825\n [76] -0.588141523  0.997284545  0.217779477  0.334395647  0.614286929\n [81] -0.039553617  0.622449447  0.403397588  0.027958800  0.708706174\n [86]  0.830397225  0.456367353  0.322102026 -1.140156446 -1.020479576\n [91]  0.720200566 -0.250283196  0.976325516  1.480212827 -0.250886229\n [96]  0.540197763  0.524467395 -1.423432994 -0.407361596  0.379118833"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers within a specific range",
    "text": "generate 100 random numbers within a specific range\n\n# example 1\nrandom_numbers <- runif(100, min = 0, max = 1)\n\nprint(random_numbers)\n\n  [1] 0.6618774638 0.0825588885 0.4808186272 0.2850932614 0.4393222593\n  [6] 0.0709930270 0.9007767797 0.9037743988 0.0650724238 0.7354078882\n [11] 0.5739673213 0.4567766839 0.3892955224 0.3051117114 0.9949570361\n [16] 0.6261569641 0.8603636753 0.0326102264 0.8136143221 0.3885573482\n [21] 0.8286615887 0.8853885334 0.6964525713 0.8885879803 0.0623804294\n [26] 0.2611310009 0.8112006374 0.1536685955 0.1631412734 0.2673654086\n [31] 0.1202295041 0.7190573262 0.4178310032 0.2959203492 0.6757242789\n [36] 0.3795058283 0.8972520733 0.8815136671 0.6246562058 0.9997801920\n [41] 0.9044869281 0.7260065172 0.4430923150 0.2133538853 0.7441003891\n [46] 0.7180105553 0.5021286253 0.0115388590 0.2178466513 0.5389892056\n [51] 0.2294833602 0.8885815684 0.6816119661 0.3313937427 0.2115073884\n [56] 0.6469147238 0.5286242415 0.4952224763 0.7775625726 0.1293347757\n [61] 0.0002599829 0.6219817912 0.7292633792 0.7263742283 0.0241404343\n [66] 0.3716499524 0.1681278152 0.0656609375 0.9557223152 0.5486943966\n [71] 0.1633711024 0.6168260933 0.2423159576 0.5892196007 0.9771701826\n [76] 0.6254412956 0.3539273001 0.3363434665 0.3822676111 0.5215425950\n [81] 0.9441126913 0.4299538473 0.5317686961 0.6697443158 0.1289668060\n [86] 0.9212081002 0.5461372233 0.6927577523 0.9063330756 0.4078946847\n [91] 0.5830422665 0.9945663996 0.6599046420 0.9211726282 0.3722742533\n [96] 0.7789323055 0.4197965285 0.3926534245 0.3493199616 0.2349970599\n\n# example 2\nrandom_numbers <- runif(100, min = 10, max = 85)\n\nprint(random_numbers)\n\n  [1] 16.72110 26.66261 67.81397 67.47033 58.62791 73.41388 15.15571 50.39444\n  [9] 58.26884 66.79678 84.83469 58.15906 66.59881 82.33287 28.24554 24.87615\n [17] 20.45969 60.76392 64.98797 70.90830 13.05080 11.46182 17.57352 53.84042\n [25] 40.17914 56.23322 15.87390 39.80567 24.27425 43.15309 34.75498 52.02834\n [33] 37.19807 30.62056 52.02106 64.46380 10.06162 70.60802 10.42587 29.60432\n [41] 78.76778 80.58548 69.90436 78.35281 31.99873 71.51949 72.23237 14.83061\n [49] 81.55508 80.68070 32.57603 68.79264 82.12354 69.52098 36.94138 68.83213\n [57] 53.81891 12.08001 39.71449 33.89305 49.81780 45.51690 32.27094 77.99559\n [65] 52.55767 75.58676 26.60948 84.32248 39.78180 16.57906 25.86080 77.73124\n [73] 21.40431 76.67366 19.15932 30.10080 44.70707 75.82822 15.97047 11.52975\n [81] 35.07488 64.74885 35.45793 11.60888 54.95427 14.50651 29.49464 68.09874\n [89] 45.05434 80.79586 42.17472 63.05162 48.46376 71.91776 60.06925 61.26093\n [97] 65.75555 40.65798 26.52919 12.15700"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "href": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "title": "Midterm Part 2",
    "section": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation",
    "text": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation\n\n## example 1\n# mean\nmy_mean <- function(x) {\n  sum(x)/length(x)\n}\n\n# mode\nmy_mode <- function(x) {\n  table_x <- table(x)\n  names(table_x)[table_x == max(table_x)]\n}\n\n# median\nmy_median <- function(x) {\n  n <- length(x)\n  if (n %% 2 == 0) {\n    median <- (sort(x)[n/2] + sort(x)[n/2 + 1])/2\n  } else {\n    median <- sort(x)[(n + 1)/2]\n  }\n  median\n}\n\n# range\nmy_range <- function(x) {\n  max(x) - min(x)\n}\n\n# standard deviation\nmy_sd <- function(x) {\n  n <- length(x)\n  mean_x <- my_mean(x)\n  sqrt(sum((x - mean_x)^2)/(n - 1))\n}\n\n## example 2 \nx <- rnorm(10)\n\nmean_x <- my_mean(x)\nmode_x <- my_mode(x)\nmedian_x <- my_median(x)\nrange_x <- my_range(x)\nsd_x <- my_sd(x)\n\nprint(mean_x)\n\n[1] 0.1549795\n\nprint(mode_x)\n\n [1] \"-1.10914880500174\"   \"-0.76383873635224\"   \"-0.612945657666588\" \n [4] \"-0.0431834087558775\" \"0.0292484062899891\"  \"0.0300428287841425\" \n [7] \"0.71048154324384\"    \"1.01695256984895\"    \"1.07004361867346\"   \n[10] \"1.22214311566423\"   \n\nprint(median_x)\n\n[1] 0.02964562\n\nprint(range_x)\n\n[1] 2.331292\n\nprint(sd_x)\n\n[1] 0.8253217"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of characters in a string variable",
    "text": "count the number of characters in a string variable\n\n# using the (nchar) function\nmy_string <- \"Hello, world!\"\nnchar(my_string)\n\n[1] 13\n\n# using the (strsplit) function\na <- \"adskfjhkadsjfh\"\nstrsplit(a,split=\"\")\n\n[[1]]\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#> [[1]]\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\nb <-strsplit(a,split=\"\")\nb[[1]] # access all elements in list 1\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nb[[1]][1] # access first element of list 1\n\n[1] \"a\"\n\n#> [1] \"a\"\n\n# lists can be unlisted\nd <- unlist(strsplit(a,split=\"\"))\nd  # all elements in character vector\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nd[1] #first element\n\n[1] \"a\"\n\n#> [1] \"a\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of words in a string variable",
    "text": "count the number of words in a string variable\n\n# using the strsplit function\na <- \"this is a sentence\"\nstrsplit(a,split=\" \") # use a space as the splitting character\n\n[[1]]\n[1] \"this\"     \"is\"       \"a\"        \"sentence\"\n\n#> [[1]]\n#> [1] \"this\"     \"is\"       \"a\"        \"sentence\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of times a specific character occurs in a string variable",
    "text": "count the number of times a specific character occurs in a string variable\n\n# using the table function\na <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)\n\ntable(a)\n\na\n1 2 3 4 5 6 7 \n1 3 6 4 2 1 1 \n\n#using the my_string function\nmy_string <- \"This is a string with some a's in it.\"\ncount_a <- 0\nfor (i in 1:nchar(my_string)) {\n  if (substr(my_string, i, i) == \"a\") {\n    count_a <- count_a + 1\n  }\n}\ncount_a\n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "href": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "title": "Midterm Part 2",
    "section": "do a logical test to see if one word is found within the text of another string variable",
    "text": "do a logical test to see if one word is found within the text of another string variable\n\n# using the test_sentence function\ntest_word <- \"hello\"\ntest_sentence <-\"is the word hello in this sentence\"\n\n# using the (%in%) function\na <- c(1,2,3,4,5)\nb <- 5\nd <- 8\n\nb%in%a\n\n[1] TRUE\n\nd%in%a\n\n[1] FALSE"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "href": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "title": "Midterm Part 2",
    "section": "put the current computer time in milliseconds into a variable",
    "text": "put the current computer time in milliseconds into a variable\n\ncurrent_time <- Sys.time()\ncurrent_time_milliseconds <- as.numeric(current_time) * 1000"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "href": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "title": "Midterm Part 2",
    "section": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time",
    "text": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time\n\nstart_time <- Sys.time()\n\nfor(i in 1:100000){\n  sqrt(i)\n}\n\nend_time <- Sys.time()\n\ntotal_time <- end_time - start_time\ntotal_time\n\nTime difference of 0.006674051 secs"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "href": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "title": "Midterm Part 2",
    "section": "read a .txt file or .csv file into a variable",
    "text": "read a .txt file or .csv file into a variable\n\n# using the read.csv function\nmydata <- read.csv(\"matrix.csv\")"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "href": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "title": "Midterm Part 2",
    "section": "create a variable that stores a 20x20 matrix of random numbers",
    "text": "create a variable that stores a 20x20 matrix of random numbers\n\na <- matrix(0, ncol=20,nrow=20)"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "href": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "title": "Midterm Part 2",
    "section": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values",
    "text": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values\n\nm <- matrix(1:12, nrow = 3, ncol = 4)\n\nwrite.csv(m, file = \"matrix.csv\", row.names = FALSE)\n\nwrite.table(m, file = \"matrix.txt\", sep = \"\\t\", row.names = FALSE)\n\n\nHARDER PROBLEMS"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "href": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "title": "Midterm Part 2",
    "section": "Problem 1 (FizzBuzz)",
    "text": "Problem 1 (FizzBuzz)\n\nfizz_buzz <- function(limit) {\n  for (i in 1:limit) {\n    if (i %% 3 == 0 && i %% 5 == 0) {\n      print(\"FizzBuzz\")\n    } else if (i %% 3 == 0) {\n      print(\"Fizz\")\n    } else if (i %% 5 == 0) {\n      print(\"Buzz\")\n    } else {\n      print(i)\n    }\n  }\n}"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "href": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "title": "Midterm Part 2",
    "section": "Problem 1 (Encrypt and Decrypt the Alphabet)",
    "text": "Problem 1 (Encrypt and Decrypt the Alphabet)\n\n# to encrypt \nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nmessage <- \"hello world\"\n\nmessage <- tolower(message)\n\nencrypted_message <- \"\"\nfor (i in 1:nchar(message)) {\n  char <- substring(message, i, i)\n  if (char %in% letters) {\n    index <- match(char, letters)\n    encrypted_char <- sub_key[index]\n  } else {\n    encrypted_char <- char\n  }\n  encrypted_message <- paste(encrypted_message, encrypted_char, sep = \"\")\n}\n\nprint(encrypted_message)\n\n[1] \"itssg vgksr\"\n\n# to decrypt\nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nencrypted_message <- \"uryyb jbeyq\"\n\nencrypted_message <- tolower(encrypted_message)\n\ndecrypted_message <- \"\"\nfor (i in 1:nchar(encrypted_message)) {\n  char <- substring(encrypted_message, i, i)\n  if (char %in% letters) {\n    index <- match(char, sub_key)\n    decrypted_char <- letters[index]\n  } else {\n    decrypted_char <- char\n  }\n  decrypted_message <- paste(decrypted_message, decrypted_char, sep = \"\")\n}\n\nprint(decrypted_message)\n\n[1] \"gdffx qxcfa\""
  },
  {
    "objectID": "posts/tip sheet/index.html",
    "href": "posts/tip sheet/index.html",
    "title": "tip sheet",
    "section": "",
    "text": "put your tips here"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/week_11/index.html",
    "href": "posts/week_11/index.html",
    "title": "Week 11",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors"
  },
  {
    "objectID": "posts/week_11/index.html#select",
    "href": "posts/week_11/index.html#select",
    "title": "Week 11",
    "section": "select",
    "text": "select\n\n# select single column by name\nproduct_dat <- budget %>% select(product) \n\n# select single column by number\nproduct_dat <- budget %>% select(2) \n\n\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\n\n\nregions <- budget %>% select(`Sales Region` = 1, 3:6)\n\nhead(regions, 2)\n\n# A tibble: 2 × 5\n  `Sales Region` sales_2019 sales_2020 expenses_2019 expenses_2020\n  <chr>               <dbl>      <dbl>         <dbl>         <dbl>\n1 North                2129       -517           822          -897\n2 North                 723         77          1037          1115\n\n\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))"
  },
  {
    "objectID": "posts/week_11/index.html#filter",
    "href": "posts/week_11/index.html#filter",
    "title": "Week 11",
    "section": "filter",
    "text": "filter\n\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# everything but the North\nbudget %>% filter(region != \"North\")\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n\n\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\nbudget %>%\n  filter(str_detect(satisfaction_2019, \"high\"))\n\n# A tibble: 3 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/week_11/index.html#arrange",
    "href": "posts/week_11/index.html#arrange",
    "title": "Week 11",
    "section": "arrange",
    "text": "arrange\n\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/week_11/index.html#mutate",
    "href": "posts/week_11/index.html#mutate",
    "title": "Week 11",
    "section": "mutate",
    "text": "mutate\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n\n\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n\n\nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n\n\n# create a column where people get a bonus if customer satisfaction was overall high or very high\n\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n                                satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\"))\n\n\n# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned\n\nbonus2 <- budget3 %>%\n  mutate(bonus_2020 = case_when(satisfaction_2020 == \"high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                satisfaction_2020 == \"very high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                TRUE ~ \"No bonus\")) # set all other values to \"no bonus\""
  },
  {
    "objectID": "posts/week_11/index.html#summarize",
    "href": "posts/week_11/index.html#summarize",
    "title": "Week 11",
    "section": "summarize",
    "text": "summarize\n\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n\n\n\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390"
  },
  {
    "objectID": "posts/week_11/index.html#group-by",
    "href": "posts/week_11/index.html#group-by",
    "title": "Week 11",
    "section": "group-by",
    "text": "group-by\n\nyear_prod <- budget4 %>%\n  group_by() %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n\n\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n\n\n\nyear_prod <- budget4 %>%\n  group_by() %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n\n\nyear_prod\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n\n\n\n# arrange by maximum profit\nyear_prod %>%\n  arrange(desc(max_profit))\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n\n\n\n# return top 3 sales\nbudget4 %>%\n  slice_max(n = 3, order_by = sales)\n\n# A tibble: 3 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 South  gadgets 2019   2022     -610\n3 West   gadgets 2019   1204      433\n\n\n\n# return top sale for each region\nbudget4 %>%\n  group_by(region) %>%\n  slice_max(n = 1, order_by = sales)\n\n# A tibble: 4 × 5\n# Groups:   region [4]\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 East   widgets 2020    -51     -342\n2 North  widgets 2019   2129      822\n3 South  gadgets 2019   2022     -610\n4 West   gadgets 2019   1204      433"
  }
]