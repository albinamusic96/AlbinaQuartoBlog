[
  {
    "objectID": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "href": "posts/midterm_part_2/index.html#do-simple-math-with-numbers-addition-subtraction-multiplication-division",
    "title": "Midterm Part 2",
    "section": "do simple math with numbers, addition, subtraction, multiplication, division",
    "text": "do simple math with numbers, addition, subtraction, multiplication, division\n\n# addition(+)\na <- 10\nb <- 20\nc <- a + b\n\nprint(c) \n\n[1] 30\n\n# subtraction (-)\na <- 10\nb <- 20\nc <- b - a\n\nprint(c) \n\n[1] 10\n\n# multiplication\na <- 10\nb <- 20\nc <- a * b\n\nprint(c)\n\n[1] 200\n\n# division\na <- 10\nb <- 20\nc <- b / a\n\nprint(c) \n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "href": "posts/midterm_part_2/index.html#put-numbers-into-variables-do-simple-math-on-the-variables",
    "title": "Midterm Part 2",
    "section": "put numbers into variables, do simple math on the variables",
    "text": "put numbers into variables, do simple math on the variables\n\na <- 10\nb <- 20\nc <- 30\n\nd <- e <- f <- 0\n\nd <- a + b + c\ne <- a * b * c\nf <- e / d\n\nprint(d) \n\n[1] 60\n\nprint(e) \n\n[1] 6000\n\nprint(f)\n\n[1] 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "href": "posts/midterm_part_2/index.html#write-code-that-will-place-the-numbers-1-to-100-separately-into-a-variable-using-for-loop-and-using-the-seq-function",
    "title": "Midterm Part 2",
    "section": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function",
    "text": "write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function\n\n# using for loop\nmy_nums <- c()\n\nfor (i in 1:100) {\n  my_nums[i] <- i\n}\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n# using the seq function\nmy_nums <- seq(from = 1, to = 100, by = 1)\n\nprint(my_nums)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#find-the-sum-of-all-the-integer-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "find the sum of all the integer numbers from 1 to 100",
    "text": "find the sum of all the integer numbers from 1 to 100\n\n# using the (sum) function\ntotal_sum <- sum(1:100)\n\nprint(total_sum)\n\n[1] 5050\n\n# using a for loop\ntotal_sum <- 0\n\nfor (i in 1:100) {\n  total_sum <- total_sum + i\n}\n\nprint(total_sum)\n\n[1] 5050"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "href": "posts/midterm_part_2/index.html#write-a-function-to-find-the-sum-of-all-integers-between-any-two-values",
    "title": "Midterm Part 2",
    "section": "write a function to find the sum of all integers between any two values",
    "text": "write a function to find the sum of all integers between any two values\n\nsum_between <- function(a, b) {\n  total_sum <- 0\n\n  if (a < b) {\n    start_val <- a\n    end_val <- b\n  } else {\n    start_val <- b\n    end_val <- a\n  }\n\n  for (i in start_val:end_val) {\n    total_sum <- total_sum + i\n  }\n\n  return(total_sum)\n}\n\nsum1 <- sum_between(1, 10)\nprint(sum1)  # Output: 55\n\n[1] 55\n\nsum2 <- sum_between(50, 100)\nprint(sum2)  # Output: 3825\n\n[1] 3825"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-odd-numbers-from-1-to-100",
    "title": "Midterm Part 2",
    "section": "list all of the odd numbers from 1 to 100",
    "text": "list all of the odd numbers from 1 to 100\n\n# using a for loop \nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n# using the seq function\nodd_nums <- seq(from = 1, to = 100, by = 2)\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n\n# using append\nodd_nums <- c()\nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    odd_nums <- append(odd_nums, i)\n  }\n}\n\nprint(odd_nums)\n\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "href": "posts/midterm_part_2/index.html#list-all-of-the-prime-numbers-from-1-to-1000",
    "title": "Midterm Part 2",
    "section": "list all of the prime numbers from 1 to 1000",
    "text": "list all of the prime numbers from 1 to 1000\n\nis_prime <- function(n) {\n  if (n < 2) {\n    return(FALSE)\n  }\n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\nfor (i in 1:1000) {\n  if (is_prime(i)) {\n    print(i)\n  }\n}\n\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers",
    "text": "generate 100 random numbers\n\n# using the runif function\nrand_nums <- runif(100)\n\nprint(rand_nums)\n\n  [1] 0.005036079 0.183540743 0.732061430 0.190197325 0.982033398 0.650855637\n  [7] 0.140457187 0.290214743 0.725291067 0.430917046 0.746215438 0.970684306\n [13] 0.168505982 0.526821824 0.322396871 0.586817303 0.753894415 0.926960395\n [19] 0.329169395 0.820941705 0.001328728 0.030984927 0.246837437 0.994543774\n [25] 0.197898575 0.146857957 0.836298078 0.326387671 0.811638942 0.899980579\n [31] 0.924762965 0.263938694 0.835922996 0.755399099 0.117687644 0.355732274\n [37] 0.149023176 0.567827332 0.870785077 0.052274175 0.529308351 0.372509911\n [43] 0.177223266 0.026269958 0.100971707 0.536750339 0.924841949 0.801686800\n [49] 0.193780965 0.788514342 0.398244164 0.402856824 0.605296635 0.537880391\n [55] 0.653524098 0.316191732 0.649009550 0.156269323 0.851423515 0.809580794\n [61] 0.605258807 0.744163417 0.902414100 0.707983547 0.602795832 0.592788455\n [67] 0.801851704 0.438512736 0.453053227 0.444753316 0.862944385 0.233565557\n [73] 0.188044642 0.911586275 0.394208783 0.029495567 0.702412155 0.329304958\n [79] 0.035801875 0.524670582 0.593859415 0.274145170 0.833163826 0.061500105\n [85] 0.371182435 0.067870491 0.982486140 0.859296277 0.219521618 0.312666572\n [91] 0.895780546 0.328394203 0.653362148 0.603529659 0.531882714 0.004475989\n [97] 0.500049418 0.729731611 0.095649101 0.846347350\n\n# using the rnorm function\nrandom_numbers <- rnorm(100, mean = 0, sd = 1)\n\nprint(random_numbers)\n\n  [1]  0.50092717 -0.72164660  0.18222549 -1.26571009  1.12250704 -0.44329990\n  [7]  0.58727553  0.44800662  1.37815949  1.63430941 -0.94526845  0.58890578\n [13] -0.22510236  0.52331719 -0.62751175  0.74914946 -0.97275937 -0.22657330\n [19] -0.42391860 -0.31423020  0.96472079 -0.47032854 -1.66660589  1.30256112\n [25]  0.97974190 -0.43485473 -2.07383540 -0.12226294 -0.27801247 -1.28967883\n [31]  0.74007018 -0.11931701  0.74227760  0.57853745 -0.90368934  0.42606938\n [37] -1.69257894 -1.06374508  0.14910517 -0.71609516  1.19634537 -0.56085194\n [43]  0.09934933  0.22497702  0.08767354 -1.12747407 -1.63174191 -2.28593028\n [49]  0.91643390  0.64302922 -0.33882949 -0.30899657  0.12542079 -1.08744619\n [55]  1.86379827 -0.05960517  0.83090871  0.68932984  1.29567996 -2.39685145\n [61] -2.67457759 -0.59889478  0.56961241  1.40078491 -0.80683885  0.67539990\n [67]  0.04753137 -0.76168377  0.00382858  1.38138811  0.66190632  0.62258301\n [73] -0.06982588 -0.65399882  1.15377707  0.76944950  0.05079102 -1.64269750\n [79]  1.17883229 -0.39428330 -0.05896240  0.06441911  2.15383188  0.03704991\n [85]  1.72221564  0.13556832  1.27040300 -1.07532423 -1.39539891 -1.43662199\n [91] -2.56049865  0.54199732  0.10811705  0.47095589  1.17126366 -0.39678954\n [97] -0.10352434 -0.15012162 -2.56628511 -0.73518944"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "href": "posts/midterm_part_2/index.html#generate-100-random-numbers-within-a-specific-range",
    "title": "Midterm Part 2",
    "section": "generate 100 random numbers within a specific range",
    "text": "generate 100 random numbers within a specific range\n\n# example 1\nrandom_numbers <- runif(100, min = 0, max = 1)\n\nprint(random_numbers)\n\n  [1] 0.59712401 0.58058179 0.53759636 0.87305305 0.91932771 0.84811133\n  [7] 0.63441629 0.22349554 0.32139707 0.14988524 0.22693544 0.82824488\n [13] 0.55854381 0.33152966 0.53096108 0.71418348 0.59565259 0.52281906\n [19] 0.51816186 0.03835797 0.93640382 0.74352076 0.89860841 0.38451214\n [25] 0.16534128 0.35760759 0.36393783 0.26622037 0.46389721 0.03521962\n [31] 0.90964114 0.14964462 0.51138228 0.27886819 0.87379343 0.04714255\n [37] 0.70089400 0.65801689 0.97308181 0.61814427 0.04291832 0.43429654\n [43] 0.20623507 0.95946963 0.98602956 0.74709343 0.75805080 0.30267278\n [49] 0.24280921 0.40306419 0.26959395 0.68158151 0.34845527 0.14049783\n [55] 0.06539532 0.82431823 0.98423139 0.34284012 0.29330486 0.87336733\n [61] 0.97985745 0.67590122 0.26398151 0.48055508 0.37830370 0.17374392\n [67] 0.98301064 0.74842178 0.62053946 0.34013331 0.43561124 0.51168296\n [73] 0.51098431 0.39758545 0.49878033 0.35993092 0.75066806 0.73614343\n [79] 0.65385458 0.23987642 0.07075231 0.42341117 0.81271274 0.08468675\n [85] 0.51949145 0.31017443 0.74527249 0.53790404 0.37490041 0.30186603\n [91] 0.45965049 0.53146770 0.21534394 0.59273962 0.79047139 0.49634919\n [97] 0.24147527 0.44026154 0.21983773 0.66651646\n\n# example 2\nrandom_numbers <- runif(100, min = 10, max = 85)\n\nprint(random_numbers)\n\n  [1] 64.65240 36.25086 73.66394 13.52213 29.91597 13.89818 33.20226 69.69939\n  [9] 67.77679 66.38634 81.12249 74.38148 34.46445 37.92923 17.37680 23.01795\n [17] 73.51589 82.04072 77.19517 50.70852 41.20762 40.14262 13.43471 79.84402\n [25] 45.13884 14.62102 16.39487 36.04026 26.38426 27.85634 68.64394 76.14605\n [33] 64.21678 16.78377 71.19765 45.47659 45.10325 40.06413 31.69710 74.64906\n [41] 47.32565 27.80933 36.71329 16.46837 49.51981 13.71022 51.24088 37.30315\n [49] 70.42618 75.72347 39.91727 30.82179 37.70927 79.26537 43.37546 80.82352\n [57] 26.25631 78.09199 80.86859 59.13789 68.55911 18.40615 33.46637 14.94283\n [65] 30.13577 34.88134 33.04043 25.96393 82.70530 38.77765 71.39840 24.61482\n [73] 50.08263 42.92718 79.10827 31.84627 49.17656 35.07062 77.17618 51.20359\n [81] 25.33663 46.43443 43.65259 29.97668 34.26658 52.28467 47.19197 29.25908\n [89] 34.16286 20.63286 70.70294 73.43893 47.37362 80.38742 17.32336 65.07119\n [97] 75.53205 29.42248 28.37177 51.33372"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "href": "posts/midterm_part_2/index.html#write-your-own-functions-to-give-descriptive-statistics-for-a-vector-variable-storing-multiple-numbers.-write-functions-for-the-following-without-using-r-intrinsics-mean-mode-median-range-standard-deviation",
    "title": "Midterm Part 2",
    "section": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation",
    "text": "write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation\n\n## example 1\n# mean\nmy_mean <- function(x) {\n  sum(x)/length(x)\n}\n\n# mode\nmy_mode <- function(x) {\n  table_x <- table(x)\n  names(table_x)[table_x == max(table_x)]\n}\n\n# median\nmy_median <- function(x) {\n  n <- length(x)\n  if (n %% 2 == 0) {\n    median <- (sort(x)[n/2] + sort(x)[n/2 + 1])/2\n  } else {\n    median <- sort(x)[(n + 1)/2]\n  }\n  median\n}\n\n# range\nmy_range <- function(x) {\n  max(x) - min(x)\n}\n\n# standard deviation\nmy_sd <- function(x) {\n  n <- length(x)\n  mean_x <- my_mean(x)\n  sqrt(sum((x - mean_x)^2)/(n - 1))\n}\n\n## example 2 \nx <- rnorm(10)\n\nmean_x <- my_mean(x)\nmode_x <- my_mode(x)\nmedian_x <- my_median(x)\nrange_x <- my_range(x)\nsd_x <- my_sd(x)\n\nprint(mean_x)\n\n[1] 0.8561326\n\nprint(mode_x)\n\n [1] \"-1.5638899693212\"   \"-0.512128035979204\" \"0.266670602476026\" \n [4] \"0.718449597576394\"  \"0.753761665464266\"  \"1.17639548926585\"  \n [7] \"1.44025771537439\"   \"1.83949996991032\"   \"2.09498024835513\"  \n[10] \"2.34732860067887\"  \n\nprint(median_x)\n\n[1] 0.9650786\n\nprint(range_x)\n\n[1] 3.911219\n\nprint(sd_x)\n\n[1] 1.214484"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-characters-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of characters in a string variable",
    "text": "count the number of characters in a string variable\n\n# using the (nchar) function\nmy_string <- \"Hello, world!\"\nnchar(my_string)\n\n[1] 13\n\n# using the (strsplit) function\na <- \"adskfjhkadsjfh\"\nstrsplit(a,split=\"\")\n\n[[1]]\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#> [[1]]\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\nb <-strsplit(a,split=\"\")\nb[[1]] # access all elements in list 1\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nb[[1]][1] # access first element of list 1\n\n[1] \"a\"\n\n#> [1] \"a\"\n\n# lists can be unlisted\nd <- unlist(strsplit(a,split=\"\"))\nd  # all elements in character vector\n\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nd[1] #first element\n\n[1] \"a\"\n\n#> [1] \"a\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-words-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of words in a string variable",
    "text": "count the number of words in a string variable\n\n# using the strsplit function\na <- \"this is a sentence\"\nstrsplit(a,split=\" \") # use a space as the splitting character\n\n[[1]]\n[1] \"this\"     \"is\"       \"a\"        \"sentence\"\n\n#> [[1]]\n#> [1] \"this\"     \"is\"       \"a\"        \"sentence\""
  },
  {
    "objectID": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "href": "posts/midterm_part_2/index.html#count-the-number-of-times-a-specific-character-occurs-in-a-string-variable",
    "title": "Midterm Part 2",
    "section": "count the number of times a specific character occurs in a string variable",
    "text": "count the number of times a specific character occurs in a string variable\n\n# using the table function\na <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)\n\ntable(a)\n\na\n1 2 3 4 5 6 7 \n1 3 6 4 2 1 1 \n\n#using the my_string function\nmy_string <- \"This is a string with some a's in it.\"\ncount_a <- 0\nfor (i in 1:nchar(my_string)) {\n  if (substr(my_string, i, i) == \"a\") {\n    count_a <- count_a + 1\n  }\n}\ncount_a\n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "href": "posts/midterm_part_2/index.html#do-a-logical-test-to-see-if-one-word-is-found-within-the-text-of-another-string-variable",
    "title": "Midterm Part 2",
    "section": "do a logical test to see if one word is found within the text of another string variable",
    "text": "do a logical test to see if one word is found within the text of another string variable\n\n# using the test_sentence function\ntest_word <- \"hello\"\ntest_sentence <-\"is the word hello in this sentence\"\n\n# using the (%in%) function\na <- c(1,2,3,4,5)\nb <- 5\nd <- 8\n\nb%in%a\n\n[1] TRUE\n\nd%in%a\n\n[1] FALSE"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "href": "posts/midterm_part_2/index.html#put-the-current-computer-time-in-milliseconds-into-a-variable",
    "title": "Midterm Part 2",
    "section": "put the current computer time in milliseconds into a variable",
    "text": "put the current computer time in milliseconds into a variable\n\ncurrent_time <- Sys.time()\ncurrent_time_milliseconds <- as.numeric(current_time) * 1000"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "href": "posts/midterm_part_2/index.html#measure-how-long-a-piece-of-code-takes-to-run-by-measuring-the-time-before-the-code-is-run-and-after-the-code-is-run-and-taking-the-difference-to-find-the-total-time",
    "title": "Midterm Part 2",
    "section": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time",
    "text": "measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time\n\nstart_time <- Sys.time()\n\nfor(i in 1:100000){\n  sqrt(i)\n}\n\nend_time <- Sys.time()\n\ntotal_time <- end_time - start_time\ntotal_time\n\nTime difference of 0.007119894 secs"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "href": "posts/midterm_part_2/index.html#read-a-.txt-file-or-.csv-file-into-a-variable",
    "title": "Midterm Part 2",
    "section": "read a .txt file or .csv file into a variable",
    "text": "read a .txt file or .csv file into a variable\n\n# using the read.csv function\nmydata <- read.csv(\"matrix.csv\")\n\nWarning in file(file, \"rt\"): cannot open file 'matrix.csv': No such file or\ndirectory\n\n\nError in file(file, \"rt\"): cannot open the connection"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "href": "posts/midterm_part_2/index.html#create-a-variable-that-stores-a-20x20-matrix-of-random-numbers",
    "title": "Midterm Part 2",
    "section": "create a variable that stores a 20x20 matrix of random numbers",
    "text": "create a variable that stores a 20x20 matrix of random numbers\n\na <- matrix(0, ncol=20,nrow=20)"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "href": "posts/midterm_part_2/index.html#output-any-matrix-to-a-txt-file-using-commas-or-tabs-to-separate-column-values-and-new-lines-to-separate-row-values",
    "title": "Midterm Part 2",
    "section": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values",
    "text": "output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values\n\nm <- matrix(1:12, nrow = 3, ncol = 4)\n\nwrite.csv(m, file = \"matrix.csv\", row.names = FALSE)\n\nwrite.table(m, file = \"matrix.txt\", sep = \"\\t\", row.names = FALSE)\n\n\nHARDER PROBLEMS"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "href": "posts/midterm_part_2/index.html#problem-1-fizzbuzz",
    "title": "Midterm Part 2",
    "section": "Problem 1 (FizzBuzz)",
    "text": "Problem 1 (FizzBuzz)\n\nfizz_buzz <- function(limit) {\n  for (i in 1:limit) {\n    if (i %% 3 == 0 && i %% 5 == 0) {\n      print(\"FizzBuzz\")\n    } else if (i %% 3 == 0) {\n      print(\"Fizz\")\n    } else if (i %% 5 == 0) {\n      print(\"Buzz\")\n    } else {\n      print(i)\n    }\n  }\n}"
  },
  {
    "objectID": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "href": "posts/midterm_part_2/index.html#problem-1-encrypt-and-decrypt-the-alphabet",
    "title": "Midterm Part 2",
    "section": "Problem 1 (Encrypt and Decrypt the Alphabet)",
    "text": "Problem 1 (Encrypt and Decrypt the Alphabet)\n\n# to encrypt \nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nmessage <- \"hello world\"\n\nmessage <- tolower(message)\n\nencrypted_message <- \"\"\nfor (i in 1:nchar(message)) {\n  char <- substring(message, i, i)\n  if (char %in% letters) {\n    index <- match(char, letters)\n    encrypted_char <- sub_key[index]\n  } else {\n    encrypted_char <- char\n  }\n  encrypted_message <- paste(encrypted_message, encrypted_char, sep = \"\")\n}\n\nprint(encrypted_message)\n\n[1] \"itssg vgksr\"\n\n# to decrypt\nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nencrypted_message <- \"uryyb jbeyq\"\n\nencrypted_message <- tolower(encrypted_message)\n\ndecrypted_message <- \"\"\nfor (i in 1:nchar(encrypted_message)) {\n  char <- substring(encrypted_message, i, i)\n  if (char %in% letters) {\n    index <- match(char, sub_key)\n    decrypted_char <- letters[index]\n  } else {\n    decrypted_char <- char\n  }\n  decrypted_message <- paste(decrypted_message, decrypted_char, sep = \"\")\n}\n\nprint(decrypted_message)\n\n[1] \"gdffx qxcfa\""
  },
  {
    "objectID": "posts/tip sheet/index.html",
    "href": "posts/tip sheet/index.html",
    "title": "tip sheet",
    "section": "",
    "text": "put your tips here"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AlbinaQuartoBlog",
    "section": "",
    "text": "Logic, Loops, and Functions\n\n\n\n\n\n\n\n\n\n\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 13\n\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday 2\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday 1\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 11\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 9 Report\n\n\n\n\n\n\n\nreport\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Part 1\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n  \n\n\n\n\nWeek 3\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 12\n\n\n\n\n\n\n\nfinal project example\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Part 2\n\n\n\n\n\n\n\nMidterm\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntip sheet\n\n\n\n\n\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nAlbina Music\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/week_13/index.html#slide-1",
    "href": "posts/week_13/index.html#slide-1",
    "title": "Week 13",
    "section": "Slide 1",
    "text": "Slide 1\n\nstuff\nstuff"
  },
  {
    "objectID": "posts/week_13/index.html#slide-2",
    "href": "posts/week_13/index.html#slide-2",
    "title": "Week 13",
    "section": "Slide 2",
    "text": "Slide 2\n\nstuff\nstuff"
  }
]