[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/midterm_part_1/index.html#write-a-blog-post-where-you-demonstrate-your-ability-to-use-these-basic-programming-concepts-in-r.",
    "href": "posts/midterm_part_1/index.html#write-a-blog-post-where-you-demonstrate-your-ability-to-use-these-basic-programming-concepts-in-r.",
    "title": "Midterm Part 1",
    "section": "Write a blog post where you demonstrate your ability to use these basic programming concepts in R.",
    "text": "Write a blog post where you demonstrate your ability to use these basic programming concepts in R.\n\nR objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n\n\n## Character/String\nmy_name <- \"Albina\"\n\nmy_name[2] \n\n[1] NA\n\nmy_strings <- c(\"apple\", \"banana\", \"cherry\")\n\nmy_strings[2] \n\n[1] \"banana\"\n\n## Numeric\nmy_num <- 5.2\n\nmy_num + 3 \n\n[1] 8.2\n\nmy_nums <- c(1, 2, 3, 4, 5)\n\nmy_nums[3]\n\n[1] 3\n\n## Integer\nmy_int <- 5L\n\nmy_int + 3L \n\n[1] 8\n\nmy_ints <- c(1L, 2L, 3L, 4L, 5L)\n\nmy_ints[3]\n\n[1] 3\n\n## Logical\nmy_bool <- TRUE\n\nmy_bool & FALSE \n\n[1] FALSE\n\nmy_logicals <- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\nmy_logicals[3]\n\n[1] TRUE\n\n## Data Frame\nmy_df <- data.frame(name = c(\"John\", \"Mary\", \"Bob\"), age = c(25, 30, 35), married = c(TRUE, TRUE, FALSE))\n\nmy_df$name\n\n[1] \"John\" \"Mary\" \"Bob\" \n\nmy_df[2, 3] \n\n[1] TRUE\n\n## List\nmy_list <- list(name = \"Albina\", age = 28, married = TRUE, hobbies = c(\"reading\", \"traveling\", \"cooking\"))\n\nmy_list[[1]] \n\n[1] \"Albina\"\n\nmy_list[[4]][2] \n\n[1] \"traveling\"\n\n\n\nLogical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n\n\n## == (equal to)\nx <- 5\ny <- 7\n\nx == y \n\n[1] FALSE\n\n## >< (greater than)\nx <- 5\ny <- 7\n\nx > y\n\n[1] FALSE\n\n## >< (less than)\nx <- 5\ny <- 7\n\nx < y \n\n[1] TRUE\n\n## ><|= (greater than or equal to)\nx <- 5\ny <- 7\n\nx >= y \n\n[1] FALSE\n\n## ><|= (less than or equal to)\nx <- 5\ny <- 7\n\nx <= y \n\n[1] TRUE\n\n## &(and)\nx <- TRUE\ny <- FALSE\n\nx & y \n\n[1] FALSE\n\n## | (or)\nx <- TRUE\ny <- FALSE\n\nx | y \n\n[1] TRUE\n\n\n\nLoops: Show that you understand the components of a for loop, and that you can use a for loop.\n\n\n## Basic Loops\nmy_nums <- c(1, 2, 3, 4, 5)\n\nfor (num in my_nums) {\n  print(num)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n## Nested Loops\nmy_nums1 <- c(1, 2, 3)\nmy_nums2 <- c(4, 5, 6)\n\nfor (num1 in my_nums1) {\n  for (num2 in my_nums2) {\n    print(num1 + num2)\n  }\n}\n\n[1] 5\n[1] 6\n[1] 7\n[1] 6\n[1] 7\n[1] 8\n[1] 7\n[1] 8\n[1] 9\n\n## \"if\" loop\nmy_nums <- c(1, 2, 3, 4, 5)\n\nfor (num in my_nums) {\n  if (num %% 2 == 0) {\n    print(num)\n  }\n}\n\n[1] 2\n[1] 4\n\n## \"break\" loop\nmy_nums <- c(1, 2, 3, 4, 5)\n\nfor (num in my_nums) {\n  if (num == 3) {\n    break\n  }\n  print(num)\n}\n\n[1] 1\n[1] 2\n\n## \"continue\" loop\nmy_nums <- c(1, 2, 3, 4, 5)\n\nfor (num in my_nums) {\n  if (num %% 2 == 1) {\n    next\n  }\n  print(num)\n}\n\n[1] 2\n[1] 4\n\n\n\nFunctions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does).\n\n\n## example 1\nmy_function <- function(x, y) {\n  z <- x + y\n  return(z)\n}\n\nresult <- my_function(3, 5)\nprint(result) \n\n[1] 8\n\n## example 2\nsum_of_squares <- function(v) {\n  sum <- 0\n\n  for (i in v) {\n    if (i %% 2 == 0) {\n      sum <- sum + i^2\n    }\n  }\n  \n  return(sum)\n}"
  },
  {
    "objectID": "posts/week_4/index.html",
    "href": "posts/week_4/index.html",
    "title": "Week 4",
    "section": "",
    "text": "Write a new blog post and submit the link to this assignment on blackboard. Write your blog around the three big themes:\nData types: Show that you understand what is available to you in R. Note also, this goal overlaps with part of the midterm project. See the appendix on Data Types in the textbook for help. Write notes and R code chunks to demonstrate your knowledge\nTidy Data: Show that you understand what this means. Give an example of data this is in tidy format, and data that is not.\nggplot2: We will continue learning about this across the semester. Show at a minimum that you can make a graph and add it to your blog. Try examples from the textbook. Show that you understand the layer concept. Identify aspects that are confusing to you so we can discuss them in class."
  },
  {
    "objectID": "posts/week_3/index.html",
    "href": "posts/week_3/index.html",
    "title": "Week 3",
    "section": "",
    "text": "Be able to make a new .qmd document YES\nBe able to render a .qmd document YES\nExplain the difference between the source editor view and visual editor view in Rstudio.\n\n\n\n\n\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\nBe aware of resources to help you learn more about markdown options.\n\n\n\n\n\nBe able to insert an R code chunk, and show the output in the rendered document.\n\n\n8 + 10 \n\n[1] 18\n\n7 - 3\n\n[1] 4\n\n30 / 10\n\n[1] 3\n\n6 * 10\n\n[1] 60\n\n\n\nmacro for quick insert\n\n\nRunning R code chunks in a qmd YES\n\n\npressing play YES\ncopy/paste into console YES\nhighlight then command-enter (mac) YES\nprecedence issues (first to last) YES\n\n\nBe aware of R code chunk options, and how to use eval, messages, error, warning, and echo. YES\nBe able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.) YES\nWrite inline r code.\nExplain how the rendering environment is different from the Rstudio environment. Rendering environment turns your work into a post meanwhile in the rstudio environment, every table and data set you create on the visual tab and kept and stored in this particular environment.\nBe aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/logic_loops_functions/index.html",
    "href": "posts/logic_loops_functions/index.html",
    "title": "Logic, Loops, and Functions",
    "section": "",
    "text": "Logic statements are used to compare two things, or two sets of things. The output of comparison is a TRUE or FALSE statement. If many things are being compared at once, the output could be many TRUE or FALSE statements for each comparison"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#equal-to",
    "href": "posts/logic_loops_functions/index.html#equal-to",
    "title": "Logic, Loops, and Functions",
    "section": "equal to (==)",
    "text": "equal to (==)\n\n1 == 1 # is 1 equal to 1?\n\n[1] TRUE\n\n1 == 2 # is 1 equal to 2?\n\n[1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n\n[1] FALSE FALSE  TRUE\n\n1 == c(2, 1, 3)\n\n[1] FALSE  TRUE FALSE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#not-equal-to",
    "href": "posts/logic_loops_functions/index.html#not-equal-to",
    "title": "Logic, Loops, and Functions",
    "section": "not equal to (!=)",
    "text": "not equal to (!=)\n\n1 != 1 # is 1 equal to 1?\n\n[1] FALSE\n\n1 != 2 # is 1 equal to 2?\n\n[1] TRUE\n\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n\n[1]  TRUE  TRUE FALSE\n\n1 != c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#greater-than-less-than",
    "href": "posts/logic_loops_functions/index.html#greater-than-less-than",
    "title": "Logic, Loops, and Functions",
    "section": "greater than/ less than",
    "text": "greater than/ less than\n\n1 > 1 # is 1 greater than 1?\n\n[1] FALSE\n\n5 > 1 # is 5 greater than 1?\n\n[1] TRUE\n\n3 < 2 # is 3 less than 2?\n\n[1] FALSE\n\n3 < 1 # is 3 less than 1?\n\n[1] FALSE\n\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE FALSE\n\nc(1, 2, 3) < c(2, 1, 3)\n\n[1]  TRUE FALSE FALSE\n\n2 > c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE FALSE FALSE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#is-something-greater-than-or-equal-to-something-else",
    "href": "posts/logic_loops_functions/index.html#is-something-greater-than-or-equal-to-something-else",
    "title": "Logic, Loops, and Functions",
    "section": "is something greater than or equal to something else (>= <=)",
    "text": "is something greater than or equal to something else (>= <=)\n\n1 >= 1 # is 1 greater than 1?\n\n[1] TRUE\n\n5 >= 1 # is 5 greater than 1?\n\n[1] TRUE\n\n3 <= 2 # is 3 less than 2?\n\n[1] FALSE\n\n3 <= 1 # is 3 less than 1?\n\n[1] FALSE\n\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE  TRUE\n\nc(1, 2, 3) <= c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n2 >= c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE  TRUE FALSE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#andthe-ampersand-is-used-for-and-which-allows-use-to-evaluate-whether-two-or-more-properties-are-all-true.",
    "href": "posts/logic_loops_functions/index.html#andthe-ampersand-is-used-for-and-which-allows-use-to-evaluate-whether-two-or-more-properties-are-all-true.",
    "title": "Logic, Loops, and Functions",
    "section": "AND(the ampersand (&) is used for “AND”, which allows use to evaluate whether two or more properties are all TRUE).",
    "text": "AND(the ampersand (&) is used for “AND”, which allows use to evaluate whether two or more properties are all TRUE).\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n16 %% 4 == 0\n\n[1] TRUE\n\n16 %% 8 == 0\n\n[1] TRUE\n\n16 %% 2 == 0\n\n[1] TRUE\n\n16 %% 1 == 0\n\n[1] TRUE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#orthe-is-used-for-or-which-allows-use-to-evaluate-at-least-one-of-the-properties-is-true.",
    "href": "posts/logic_loops_functions/index.html#orthe-is-used-for-or-which-allows-use-to-evaluate-at-least-one-of-the-properties-is-true.",
    "title": "Logic, Loops, and Functions",
    "section": "OR(the (|) is used for OR, which allows use to evaluate at least one of the properties is TRUE).",
    "text": "OR(the (|) is used for OR, which allows use to evaluate at least one of the properties is TRUE).\n\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n\n[1] TRUE\n\n# is 16 divisible by 4 OR 3\n16 %% 4 == 0 | 16 %% 3 == 0\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#true-falsewhen-r-returns-values-as-true-or-false-it-returns-a-logical-variable.-it-also-treats-true-as-a-1-and-false-as-a-0.",
    "href": "posts/logic_loops_functions/index.html#true-falsewhen-r-returns-values-as-true-or-false-it-returns-a-logical-variable.-it-also-treats-true-as-a-1-and-false-as-a-0.",
    "title": "Logic, Loops, and Functions",
    "section": "TRUE FALSE(when R returns values as TRUE or FALSE, it returns a logical variable. It also treats TRUE as a 1, and FALSE as a 0).",
    "text": "TRUE FALSE(when R returns values as TRUE or FALSE, it returns a logical variable. It also treats TRUE as a 1, and FALSE as a 0).\n\nc(1, 2, 3) == c(1, 2, 3)\n\n[1] TRUE TRUE TRUE\n\nsum(c(1, 2, 3) == c(1, 2, 3))\n\n[1] 3\n\nc(1, 2, 3) == c(2, 1, 3)\n\n[1] FALSE FALSE  TRUE\n\nsum(c(1, 2, 3) == c(2, 1, 3))\n\n[1] 1"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#if-elsea-roller-coaster-operator-checks-if-people-are-taller-than-a-line-to-see-if-they-can-ride-the-coaster.-this-is-an-if-else-control-structure.-if-the-person-is-taller-than-the-line-then-they-can-go-on-the-ride-else-otherwise-the-person-can-not-go-on-the-ride.-in-other-words-if-the-situation-is-x-then-do-something-else-if-the-situation-is-not-x-then-do-something-different.-if-and-else-statements-let-us-specify-the-conditions-when-specific-actions-are-taken.-generally-if-and-else-statements-are-used-inside-loops-for-or-while-or-repeat-loops-because-at-each-step-or-iteration-of-the-loop-we-want-to-check-something-and-then-do-something.",
    "href": "posts/logic_loops_functions/index.html#if-elsea-roller-coaster-operator-checks-if-people-are-taller-than-a-line-to-see-if-they-can-ride-the-coaster.-this-is-an-if-else-control-structure.-if-the-person-is-taller-than-the-line-then-they-can-go-on-the-ride-else-otherwise-the-person-can-not-go-on-the-ride.-in-other-words-if-the-situation-is-x-then-do-something-else-if-the-situation-is-not-x-then-do-something-different.-if-and-else-statements-let-us-specify-the-conditions-when-specific-actions-are-taken.-generally-if-and-else-statements-are-used-inside-loops-for-or-while-or-repeat-loops-because-at-each-step-or-iteration-of-the-loop-we-want-to-check-something-and-then-do-something.",
    "title": "Logic, Loops, and Functions",
    "section": "IF ELSE(a roller-coaster operator checks if people are taller than a line to see if they can ride the coaster. This is an IF ELSE control structure. IF the person is taller than the line, then they can go on the ride; ELSE (otherwise) the person can not go on the ride. In other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. IF and ELSE statements let us specify the conditions when specific actions are taken. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something).",
    "text": "IF ELSE(a roller-coaster operator checks if people are taller than a line to see if they can ride the coaster. This is an IF ELSE control structure. IF the person is taller than the line, then they can go on the ride; ELSE (otherwise) the person can not go on the ride. In other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. IF and ELSE statements let us specify the conditions when specific actions are taken. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something).\n\na <- 1 # define a to be a 1\n\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] 1\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(rbinom(10,1,.5)) # this is what happens if a is not 1\n  1+1\n  print(\"hello world\")\n  rbinom(10,1,.5)\n}\n\n [1] 1 1 1 0 1 0 0 1 0 1\n[1] \"hello world\"\n\n\n [1] 0 0 0 1 1 0 0 0 0 1\n\na <- 3.5\n\nif(a >= 4){\n  print(\"get to go on the cyclone\")\n}\n\nif(a < 4){\n  print(\"sorry\")\n}\n\n[1] \"sorry\"\n\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  \n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n  \n}\n\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n\na <- c(1, 2, 3, 1, 2, 0, 1) # make a variable contain 1s and 0s\n# write a loop to check each element in the variable\n# and do different things depending on the element\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else if (i == 2) {\n    print(\"I'm a 2\") # what to do when i is 2\n  } else if (i == 3) {\n    print(\"I'm a 3\") # what to do when i is 3\n  } else {\n    print(\"I'm not any of the above\") #what to do when none are true\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm a 3\"\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm not any of the above\"\n[1] \"I'm a 1\""
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#loopsloop-control-is-defined-in-between-the-parentheses-.-the-name-of-the-iteratori-is-placed-on-the-left-of-incan-be-assigned-any-name-you-want-does-not-need-to-be-declared-in-advance.-during-the-execution-of-the-loop-the-iterator-takes-on-the-values-inside-the-vector-which-is-placed-on-the-right-side-of-in.-specifically-the-following-is-happening.the-loop-will-automatically-stop-once-it-reaches-the-last-item-in-the-vector.-the-loop-can-be-stopped-before-that-using-the-break-command.",
    "href": "posts/logic_loops_functions/index.html#loopsloop-control-is-defined-in-between-the-parentheses-.-the-name-of-the-iteratori-is-placed-on-the-left-of-incan-be-assigned-any-name-you-want-does-not-need-to-be-declared-in-advance.-during-the-execution-of-the-loop-the-iterator-takes-on-the-values-inside-the-vector-which-is-placed-on-the-right-side-of-in.-specifically-the-following-is-happening.the-loop-will-automatically-stop-once-it-reaches-the-last-item-in-the-vector.-the-loop-can-be-stopped-before-that-using-the-break-command.",
    "title": "Logic, Loops, and Functions",
    "section": "loops(loop control is defined in between the parentheses (). The name of the iterator(i) is placed on the left of in(can be assigned any name you want, does not need to be declared in advance). During the execution of the loop, the iterator takes on the values inside the vector which is placed on the right side of in. Specifically, the following is happening.The loop will automatically stop once it reaches the last item in the vector. the loop can be stopped before that using the “break” command).",
    "text": "loops(loop control is defined in between the parentheses (). The name of the iterator(i) is placed on the left of in(can be assigned any name you want, does not need to be declared in advance). During the execution of the loop, the iterator takes on the values inside the vector which is placed on the right side of in. Specifically, the following is happening.The loop will automatically stop once it reaches the last item in the vector. the loop can be stopped before that using the “break” command).\n\nLoop steps: 1. iterator <- vector[1] 2. iterator <- vector[2] 3. iterator <- vector[3] 4. etc.\n\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n# show the value of i each step of the loop\nfor(i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n# define the vector to loop over in advance\nx <- 1:5\nfor (i in x) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n# reminder that (i) becomes the next value in the vector\nmy_sequence <- c(1, 5, 2, 3, 4)\nfor (i in my_sequence) {\n  print(i)\n}\n\n[1] 1\n[1] 5\n[1] 2\n[1] 3\n[1] 4\n\n# index vector does not need to be numbers\nmy_things <- c(\"A\", \"B\", \"C\", \"D\")\nfor (i in my_things) {\n  print(i)\n}\n\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\""
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#breaking-a-loopbreak-stops-a-loop-used-with-logical-statements-to-define-the-conditions-necessary-to-cause-the-break.",
    "href": "posts/logic_loops_functions/index.html#breaking-a-loopbreak-stops-a-loop-used-with-logical-statements-to-define-the-conditions-necessary-to-cause-the-break.",
    "title": "Logic, Loops, and Functions",
    "section": "breaking a loop(“break” stops a loop; used with logical statements to define the conditions necessary to cause the break).",
    "text": "breaking a loop(“break” stops a loop; used with logical statements to define the conditions necessary to cause the break).\n\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#while-loopswhile-loops-run-until-a-logical-condition-is-met.-here-there-is-no-iterator-just-a-logic-statement-that-needs-to-be-met.-this-one-prints-i-while-i-is-less-than-6.-as-soon-as-i-becomes-not-less-than-6-then-the-loop-stops.-critically-inside-the-loop-the-value-of-i-increases-each-iteration.",
    "href": "posts/logic_loops_functions/index.html#while-loopswhile-loops-run-until-a-logical-condition-is-met.-here-there-is-no-iterator-just-a-logic-statement-that-needs-to-be-met.-this-one-prints-i-while-i-is-less-than-6.-as-soon-as-i-becomes-not-less-than-6-then-the-loop-stops.-critically-inside-the-loop-the-value-of-i-increases-each-iteration.",
    "title": "Logic, Loops, and Functions",
    "section": "while loops(while loops run until a logical condition is met. Here there is no iterator, just a logic statement that needs to be met. this one prints (i) while (i) is less than 6. as soon as (i) becomes “not less than 6”, then the loop stops. Critically, inside the loop, the value of (i) increases each iteration).",
    "text": "while loops(while loops run until a logical condition is met. Here there is no iterator, just a logic statement that needs to be met. this one prints (i) while (i) is less than 6. as soon as (i) becomes “not less than 6”, then the loop stops. Critically, inside the loop, the value of (i) increases each iteration).\n\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i <- i + 1 #add one eachs step of the loop\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#repeat-loopssimilar-to-while-but-lets-do-things-until-a-condition-is-met.",
    "href": "posts/logic_loops_functions/index.html#repeat-loopssimilar-to-while-but-lets-do-things-until-a-condition-is-met.",
    "title": "Logic, Loops, and Functions",
    "section": "repeat loops(similar to while, but let’s do things until a condition is met).",
    "text": "repeat loops(similar to while, but let’s do things until a condition is met).\n\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\ni <- 0\nrepeat {\n    i <- i + 1\n    \n    if (i == 5) {\n      break\n    }\n    \n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4"
  },
  {
    "objectID": "posts/logic_loops_functions/index.html#examples",
    "href": "posts/logic_loops_functions/index.html#examples",
    "title": "Logic, Loops, and Functions",
    "section": "examples",
    "text": "examples\n\nfor(i in 1:5) print(i)\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n# put 1 into the first five positions of x\nx <- c() # create empty vector\nfor (i in 1:5) {\n  x[i] <- 1  # assign 1 to the ith slot in x\n}\nx\n\n[1] 1 1 1 1 1\n\n# put the numbers 1-5 in the first 5 positions of x\nx <- c()\nfor (i in 1:5) {\n  x[i] <- i\n}\nx\n\n[1] 1 2 3 4 5\n\na <- c(1, 4, 3, 5, 7, 6, 8, 2)\nodd <- c()\ncounter <- 0\nfor (i in a) {\n# (i) will the values of a in each position\n  counter <- counter + 1\n  if (i %% 2 != 0) {\n    odd[counter] <- \"odd\"\n  } else {\n    odd[counter] <- \"even\"\n  }\n}\nodd\n\n[1] \"odd\"  \"even\" \"odd\"  \"odd\"  \"odd\"  \"even\" \"even\" \"even\"\n\n# an alternative strategy\na <- c(1, 4, 3, 5, 7, 6, 8, 2)\nodd <- c()\n# 1:length(a) creates a sequence from 1 to length\nfor (i in 1:length(a)) {\n  if (a[i] %% 2 != 0) {\n    odd[i] <- \"odd\"\n  } else {\n    odd[i] <- \"even\"\n  }\n}\nodd\n\n[1] \"odd\"  \"even\" \"odd\"  \"odd\"  \"odd\"  \"even\" \"even\" \"even\"\n\n## nesting loops\nfor(i in 1:5) {\n  for (j in 1:5) {\n    print(c(i, j))\n  }\n}\n\n[1] 1 1\n[1] 1 2\n[1] 1 3\n[1] 1 4\n[1] 1 5\n[1] 2 1\n[1] 2 2\n[1] 2 3\n[1] 2 4\n[1] 2 5\n[1] 3 1\n[1] 3 2\n[1] 3 3\n[1] 3 4\n[1] 3 5\n[1] 4 1\n[1] 4 2\n[1] 4 3\n[1] 4 4\n[1] 4 5\n[1] 5 1\n[1] 5 2\n[1] 5 3\n[1] 5 4\n[1] 5 5\n\n# example of using nested loops to fill the contents\nmy_matrix <- matrix(0, ncol = 5, nrow = 5)\nfor (i in 1:5) {\n  for (j in 1:5) {\n    my_matrix[i, j] <- i * j\n  }\n}\nmy_matrix\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    2    4    6    8   10\n[3,]    3    6    9   12   15\n[4,]    4    8   12   16   20\n[5,]    5   10   15   20   25\n\n##break exits out of the immediate loop\nsum_of_i_j <- c()\ncounter <- 0\nfor (i in 1:5) {\n  for (j in 1:5) {\n    counter <- counter + 1\n    sum_of_i_j[counter] <- i + j\n    if (i + j > 5) {\n      break\n    }\n  }\n}\nsum_of_i_j\n\n [1] 2 3 4 5 6 3 4 5 6 4 5 6 5 6 6"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/tip sheet/index.html",
    "href": "posts/tip sheet/index.html",
    "title": "tip sheet",
    "section": "",
    "text": "put your tips here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AlbinaQuartoBlog",
    "section": "",
    "text": "Logic, Loops, and Functions\n\n\n\n\n\n\n\n\n\n\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Part 1\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\n\n\n\n\n\n\n\nqmd notes\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2023\n\n\nAlbina Music\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntip sheet\n\n\n\n\n\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nAlbina Music\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]