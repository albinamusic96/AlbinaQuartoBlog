{
  "hash": "06fd8440dc0f90b93872a7b1a7eba7ed",
  "result": {
    "markdown": "---\ntitle: \"Midterm Part 2\"\nauthor: \"Albina Music\"\ndate: \"2023-02-18\"\ncategories: [Midterm]\n---\n\n\n### M2(solving problems)\n## do simple math with numbers, addition, subtraction, multiplication, division\n\n::: {.cell}\n\n```{.r .cell-code}\n# addition(+)\na <- 10\nb <- 20\nc <- a + b\n\nprint(c) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n# subtraction (-)\na <- 10\nb <- 20\nc <- b - a\n\nprint(c) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# multiplication\na <- 10\nb <- 20\nc <- a * b\n\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200\n```\n:::\n\n```{.r .cell-code}\n# division\na <- 10\nb <- 20\nc <- b / a\n\nprint(c) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## put numbers into variables, do simple math on the variables\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 10\nb <- 20\nc <- 30\n\nd <- e <- f <- 0\n\nd <- a + b + c\ne <- a * b * c\nf <- e / d\n\nprint(d) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n\n```{.r .cell-code}\nprint(e) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6000\n```\n:::\n\n```{.r .cell-code}\nprint(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n## write code that will place the numbers 1 to 100 separately into a variable using for loop and using the seq function\n\n::: {.cell}\n\n```{.r .cell-code}\n# using for loop\nmy_nums <- c()\n\nfor (i in 1:100) {\n  my_nums[i] <- i\n}\n\nprint(my_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n\n```{.r .cell-code}\n# using the seq function\nmy_nums <- seq(from = 1, to = 100, by = 1)\n\nprint(my_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n:::\n\n\n## find the sum of all the integer numbers from 1 to 100\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the (sum) function\ntotal_sum <- sum(1:100)\n\nprint(total_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\n# using a for loop\ntotal_sum <- 0\n\nfor (i in 1:100) {\n  total_sum <- total_sum + i\n}\n\nprint(total_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n:::\n\n\n## write a function to find the sum of all integers between any two values\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_between <- function(a, b) {\n  total_sum <- 0\n\n  if (a < b) {\n    start_val <- a\n    end_val <- b\n  } else {\n    start_val <- b\n    end_val <- a\n  }\n\n  for (i in start_val:end_val) {\n    total_sum <- total_sum + i\n  }\n\n  return(total_sum)\n}\n\nsum1 <- sum_between(1, 10)\nprint(sum1)  # Output: 55\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\nsum2 <- sum_between(50, 100)\nprint(sum2)  # Output: 3825\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3825\n```\n:::\n:::\n\n\n## list all of the odd numbers from 1 to 100\n\n::: {.cell}\n\n```{.r .cell-code}\n# using a for loop \nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n\n```{.r .cell-code}\n# using the seq function\nodd_nums <- seq(from = 1, to = 100, by = 2)\n\nprint(odd_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n```\n:::\n\n```{.r .cell-code}\n# using append\nodd_nums <- c()\nfor (i in 1:100) {\n  if (i %% 2 == 1) {\n    odd_nums <- append(odd_nums, i)\n  }\n}\n\nprint(odd_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n```\n:::\n:::\n\n\n## list all of the prime numbers from 1 to 1000\n\n::: {.cell}\n\n```{.r .cell-code}\nis_prime <- function(n) {\n  if (n < 2) {\n    return(FALSE)\n  }\n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\nfor (i in 1:1000) {\n  if (is_prime(i)) {\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997\n```\n:::\n:::\n\n\n## generate 100 random numbers\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the runif function\nrand_nums <- runif(100)\n\nprint(rand_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 0.537392160 0.381179022 0.113398973 0.974760720 0.093327996 0.901190103\n  [7] 0.529180399 0.448824899 0.635544255 0.351170922 0.549191403 0.585270015\n [13] 0.907362988 0.721227803 0.016722095 0.069109890 0.442123420 0.269403039\n [19] 0.974533267 0.900471758 0.648048777 0.880047734 0.898907208 0.463053815\n [25] 0.927050439 0.636372252 0.062198963 0.869094931 0.209317259 0.407079123\n [31] 0.991599716 0.971994986 0.352060219 0.456773935 0.087728833 0.798727108\n [37] 0.644973734 0.802463866 0.885654693 0.650576136 0.862418580 0.126974812\n [43] 0.398222953 0.197290575 0.316844648 0.004392612 0.002827291 0.575859059\n [49] 0.622502246 0.709783277 0.445219987 0.133216562 0.999724193 0.010541799\n [55] 0.647719056 0.361398346 0.532331097 0.806898296 0.524515020 0.185222841\n [61] 0.186139207 0.388778531 0.053053949 0.274274201 0.589779013 0.014378782\n [67] 0.763342604 0.263173729 0.879450649 0.694881904 0.309386540 0.494669121\n [73] 0.382545028 0.868809687 0.851629490 0.186799904 0.636102591 0.955198377\n [79] 0.099587729 0.151482880 0.880414376 0.760537803 0.367160266 0.912775295\n [85] 0.928703013 0.892028503 0.091870700 0.310125761 0.496322671 0.451077587\n [91] 0.637056102 0.463130089 0.671893928 0.330047243 0.455739512 0.857025319\n [97] 0.487496559 0.695552390 0.476932811 0.104413666\n```\n:::\n\n```{.r .cell-code}\n# using the rnorm function\nrandom_numbers <- rnorm(100, mean = 0, sd = 1)\n\nprint(random_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  2.769032530 -0.052834311  0.228279753  1.076795472  0.720458283\n  [6]  0.480475861  0.490929975  0.637772879 -2.007600177 -0.297893154\n [11]  1.158693768  1.372720659  0.525846782 -0.129452588 -1.415120189\n [16]  0.049951473  0.439976174 -0.711194279  1.635020774  0.551863459\n [21] -0.335710799 -0.059214435  1.852050220  0.716786564  1.023260566\n [26]  1.224081536 -0.215587485  0.434655344  0.354981339 -1.936774018\n [31]  0.806362535  1.400794691  0.827339615  0.006488173 -1.811875679\n [36] -0.413471637 -0.552497503 -0.052271599 -0.140694451  0.831273086\n [41]  0.795315835  0.639430231  0.410287221  0.792473654  0.688611669\n [46] -1.015276260  1.186296062 -1.375890886  0.652751744  0.891138828\n [51] -0.573675518 -0.537919735  0.477620076  0.585538979 -1.741861141\n [56]  0.314716548 -0.930067889 -2.017124306  1.444913377  1.236833821\n [61] -1.329502965  1.434264950  0.425161737  0.109302103 -1.256857535\n [66] -0.707681029  1.068602929 -0.668234504  1.574198220 -0.124918767\n [71] -0.574641809 -0.979798479 -0.205011092 -0.370414536  0.710356825\n [76] -0.588141523  0.997284545  0.217779477  0.334395647  0.614286929\n [81] -0.039553617  0.622449447  0.403397588  0.027958800  0.708706174\n [86]  0.830397225  0.456367353  0.322102026 -1.140156446 -1.020479576\n [91]  0.720200566 -0.250283196  0.976325516  1.480212827 -0.250886229\n [96]  0.540197763  0.524467395 -1.423432994 -0.407361596  0.379118833\n```\n:::\n:::\n\n\n## generate 100 random numbers within a specific range\n\n::: {.cell}\n\n```{.r .cell-code}\n# example 1\nrandom_numbers <- runif(100, min = 0, max = 1)\n\nprint(random_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 0.6618774638 0.0825588885 0.4808186272 0.2850932614 0.4393222593\n  [6] 0.0709930270 0.9007767797 0.9037743988 0.0650724238 0.7354078882\n [11] 0.5739673213 0.4567766839 0.3892955224 0.3051117114 0.9949570361\n [16] 0.6261569641 0.8603636753 0.0326102264 0.8136143221 0.3885573482\n [21] 0.8286615887 0.8853885334 0.6964525713 0.8885879803 0.0623804294\n [26] 0.2611310009 0.8112006374 0.1536685955 0.1631412734 0.2673654086\n [31] 0.1202295041 0.7190573262 0.4178310032 0.2959203492 0.6757242789\n [36] 0.3795058283 0.8972520733 0.8815136671 0.6246562058 0.9997801920\n [41] 0.9044869281 0.7260065172 0.4430923150 0.2133538853 0.7441003891\n [46] 0.7180105553 0.5021286253 0.0115388590 0.2178466513 0.5389892056\n [51] 0.2294833602 0.8885815684 0.6816119661 0.3313937427 0.2115073884\n [56] 0.6469147238 0.5286242415 0.4952224763 0.7775625726 0.1293347757\n [61] 0.0002599829 0.6219817912 0.7292633792 0.7263742283 0.0241404343\n [66] 0.3716499524 0.1681278152 0.0656609375 0.9557223152 0.5486943966\n [71] 0.1633711024 0.6168260933 0.2423159576 0.5892196007 0.9771701826\n [76] 0.6254412956 0.3539273001 0.3363434665 0.3822676111 0.5215425950\n [81] 0.9441126913 0.4299538473 0.5317686961 0.6697443158 0.1289668060\n [86] 0.9212081002 0.5461372233 0.6927577523 0.9063330756 0.4078946847\n [91] 0.5830422665 0.9945663996 0.6599046420 0.9211726282 0.3722742533\n [96] 0.7789323055 0.4197965285 0.3926534245 0.3493199616 0.2349970599\n```\n:::\n\n```{.r .cell-code}\n# example 2\nrandom_numbers <- runif(100, min = 10, max = 85)\n\nprint(random_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 16.72110 26.66261 67.81397 67.47033 58.62791 73.41388 15.15571 50.39444\n  [9] 58.26884 66.79678 84.83469 58.15906 66.59881 82.33287 28.24554 24.87615\n [17] 20.45969 60.76392 64.98797 70.90830 13.05080 11.46182 17.57352 53.84042\n [25] 40.17914 56.23322 15.87390 39.80567 24.27425 43.15309 34.75498 52.02834\n [33] 37.19807 30.62056 52.02106 64.46380 10.06162 70.60802 10.42587 29.60432\n [41] 78.76778 80.58548 69.90436 78.35281 31.99873 71.51949 72.23237 14.83061\n [49] 81.55508 80.68070 32.57603 68.79264 82.12354 69.52098 36.94138 68.83213\n [57] 53.81891 12.08001 39.71449 33.89305 49.81780 45.51690 32.27094 77.99559\n [65] 52.55767 75.58676 26.60948 84.32248 39.78180 16.57906 25.86080 77.73124\n [73] 21.40431 76.67366 19.15932 30.10080 44.70707 75.82822 15.97047 11.52975\n [81] 35.07488 64.74885 35.45793 11.60888 54.95427 14.50651 29.49464 68.09874\n [89] 45.05434 80.79586 42.17472 63.05162 48.46376 71.91776 60.06925 61.26093\n [97] 65.75555 40.65798 26.52919 12.15700\n```\n:::\n:::\n\n\n## write your own functions to give descriptive statistics for a vector variable storing multiple numbers. Write functions for the following without using R intrinsics: mean, mode, median, range, standard deviation\n\n::: {.cell}\n\n```{.r .cell-code}\n## example 1\n# mean\nmy_mean <- function(x) {\n  sum(x)/length(x)\n}\n\n# mode\nmy_mode <- function(x) {\n  table_x <- table(x)\n  names(table_x)[table_x == max(table_x)]\n}\n\n# median\nmy_median <- function(x) {\n  n <- length(x)\n  if (n %% 2 == 0) {\n    median <- (sort(x)[n/2] + sort(x)[n/2 + 1])/2\n  } else {\n    median <- sort(x)[(n + 1)/2]\n  }\n  median\n}\n\n# range\nmy_range <- function(x) {\n  max(x) - min(x)\n}\n\n# standard deviation\nmy_sd <- function(x) {\n  n <- length(x)\n  mean_x <- my_mean(x)\n  sqrt(sum((x - mean_x)^2)/(n - 1))\n}\n\n## example 2 \nx <- rnorm(10)\n\nmean_x <- my_mean(x)\nmode_x <- my_mode(x)\nmedian_x <- my_median(x)\nrange_x <- my_range(x)\nsd_x <- my_sd(x)\n\nprint(mean_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1549795\n```\n:::\n\n```{.r .cell-code}\nprint(mode_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"-1.10914880500174\"   \"-0.76383873635224\"   \"-0.612945657666588\" \n [4] \"-0.0431834087558775\" \"0.0292484062899891\"  \"0.0300428287841425\" \n [7] \"0.71048154324384\"    \"1.01695256984895\"    \"1.07004361867346\"   \n[10] \"1.22214311566423\"   \n```\n:::\n\n```{.r .cell-code}\nprint(median_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02964562\n```\n:::\n\n```{.r .cell-code}\nprint(range_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.331292\n```\n:::\n\n```{.r .cell-code}\nprint(sd_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8253217\n```\n:::\n:::\n\n\n## count the number of characters in a string variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the (nchar) function\nmy_string <- \"Hello, world!\"\nnchar(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\n# using the (strsplit) function\na <- \"adskfjhkadsjfh\"\nstrsplit(a,split=\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n```\n:::\n\n```{.r .cell-code}\n#> [[1]]\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n\nb <-strsplit(a,split=\"\")\nb[[1]] # access all elements in list 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n```\n:::\n\n```{.r .cell-code}\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nb[[1]][1] # access first element of list 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\n#> [1] \"a\"\n\n# lists can be unlisted\nd <- unlist(strsplit(a,split=\"\"))\nd  # all elements in character vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\n```\n:::\n\n```{.r .cell-code}\n#>  [1] \"a\" \"d\" \"s\" \"k\" \"f\" \"j\" \"h\" \"k\" \"a\" \"d\" \"s\" \"j\" \"f\" \"h\"\nd[1] #first element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\n#> [1] \"a\"\n```\n:::\n\n\n## count the number of words in a string variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the strsplit function\na <- \"this is a sentence\"\nstrsplit(a,split=\" \") # use a space as the splitting character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"this\"     \"is\"       \"a\"        \"sentence\"\n```\n:::\n\n```{.r .cell-code}\n#> [[1]]\n#> [1] \"this\"     \"is\"       \"a\"        \"sentence\"\n```\n:::\n\n\n## count the number of times a specific character occurs in a string variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the table function\na <- c(1,3,2,3,2,3,2,3,4,5,4,3,4,3,4,5,6,7)\n\ntable(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\n1 2 3 4 5 6 7 \n1 3 6 4 2 1 1 \n```\n:::\n\n```{.r .cell-code}\n#using the my_string function\nmy_string <- \"This is a string with some a's in it.\"\ncount_a <- 0\nfor (i in 1:nchar(my_string)) {\n  if (substr(my_string, i, i) == \"a\") {\n    count_a <- count_a + 1\n  }\n}\ncount_a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## do a logical test to see if one word is found within the text of another string variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the test_sentence function\ntest_word <- \"hello\"\ntest_sentence <-\"is the word hello in this sentence\"\n\n# using the (%in%) function\na <- c(1,2,3,4,5)\nb <- 5\nd <- 8\n\nb%in%a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nd%in%a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## put the current computer time in milliseconds into a variable\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_time <- Sys.time()\ncurrent_time_milliseconds <- as.numeric(current_time) * 1000\n```\n:::\n\n\n## measure how long a piece of code takes to run by measuring the time before the code is run, and after the code is run, and taking the difference to find the total time\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor(i in 1:100000){\n  sqrt(i)\n}\n\nend_time <- Sys.time()\n\ntotal_time <- end_time - start_time\ntotal_time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.006674051 secs\n```\n:::\n:::\n\n\n## read a .txt file or .csv file into a variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the read.csv function\nmydata <- read.csv(\"matrix.csv\")\n```\n:::\n\n\n## create a variable that stores a 20x20 matrix of random numbers\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(0, ncol=20,nrow=20)\n```\n:::\n\n\n## output any matrix to a txt file using commas or tabs to separate column values, and new lines to separate row values\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:12, nrow = 3, ncol = 4)\n\nwrite.csv(m, file = \"matrix.csv\", row.names = FALSE)\n\nwrite.table(m, file = \"matrix.txt\", sep = \"\\t\", row.names = FALSE)\n```\n:::\n\n\n### HARDER PROBLEMS\n## Problem 1 (FizzBuzz)\n\n::: {.cell}\n\n```{.r .cell-code}\nfizz_buzz <- function(limit) {\n  for (i in 1:limit) {\n    if (i %% 3 == 0 && i %% 5 == 0) {\n      print(\"FizzBuzz\")\n    } else if (i %% 3 == 0) {\n      print(\"Fizz\")\n    } else if (i %% 5 == 0) {\n      print(\"Buzz\")\n    } else {\n      print(i)\n    }\n  }\n}\n```\n:::\n\n\n## Problem 1 (Encrypt and Decrypt the Alphabet)\n\n::: {.cell}\n\n```{.r .cell-code}\n# to encrypt \nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nmessage <- \"hello world\"\n\nmessage <- tolower(message)\n\nencrypted_message <- \"\"\nfor (i in 1:nchar(message)) {\n  char <- substring(message, i, i)\n  if (char %in% letters) {\n    index <- match(char, letters)\n    encrypted_char <- sub_key[index]\n  } else {\n    encrypted_char <- char\n  }\n  encrypted_message <- paste(encrypted_message, encrypted_char, sep = \"\")\n}\n\nprint(encrypted_message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"itssg vgksr\"\n```\n:::\n\n```{.r .cell-code}\n# to decrypt\nsub_key <- c(\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\n\nencrypted_message <- \"uryyb jbeyq\"\n\nencrypted_message <- tolower(encrypted_message)\n\ndecrypted_message <- \"\"\nfor (i in 1:nchar(encrypted_message)) {\n  char <- substring(encrypted_message, i, i)\n  if (char %in% letters) {\n    index <- match(char, sub_key)\n    decrypted_char <- letters[index]\n  } else {\n    decrypted_char <- char\n  }\n  decrypted_message <- paste(decrypted_message, decrypted_char, sep = \"\")\n}\n\nprint(decrypted_message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gdffx qxcfa\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}